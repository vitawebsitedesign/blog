<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="vitawebsitedesign.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="vitawebsitedesign.github.io/blog/" rel="alternate" type="text/html" /><updated>2023-01-27T20:41:36+11:00</updated><id>vitawebsitedesign.github.io/blog/feed.xml</id><title type="html">Mementos</title><subtitle>blog</subtitle><entry><title type="html">Designing and programming an event-driven predictive model in Lua</title><link href="vitawebsitedesign.github.io/blog/2022/09/06/designing-and-programming-an-event-driven-predictive-model-in-lua.html" rel="alternate" type="text/html" title="Designing and programming an event-driven predictive model in Lua" /><published>2022-09-06T00:00:00+10:00</published><updated>2022-09-06T00:00:00+10:00</updated><id>vitawebsitedesign.github.io/blog/2022/09/06/designing-and-programming-an-event-driven-predictive-model-in-lua</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2022/09/06/designing-and-programming-an-event-driven-predictive-model-in-lua.html">&lt;p&gt;This blog post details an 8-month journey in developing &lt;a href=&quot;https://www.mathworks.com/discovery/predictive-modeling.html&quot;&gt;predictive math algorithms&lt;/a&gt; in WoW &amp;amp; integrating them into the &lt;a href=&quot;https://wowpedia.fandom.com/wiki/Category:API_events&quot;&gt;TBC&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/WeakAuras/WeakAuras2/wiki/API-Documentation&quot;&gt;WeakAura&lt;/a&gt; APIs. The WeakAuras integration requires deep knowledge of their API, often requiring experimentation to discover the full extent of their interface due to competing sources of incomplete &amp;amp; outdated documentation.&lt;/p&gt;

&lt;p&gt;Integrating with the 2 API’s also involved the &lt;a href=&quot;https://www.lua.org/&quot;&gt;Lua programming language&lt;/a&gt;, and since the math we desire is predictive, it also required understanding the “hidden” math that drives the WoW product behind the scenes.&lt;/p&gt;

&lt;p&gt;For your convenience, these algorithms are now shared via &lt;a href=&quot;https://wago.io/t6on5CWbp&quot;&gt;Wago&lt;/a&gt; &amp;amp; you can also view this in &lt;a href=&quot;https://www.linkedin.com/in/michael-nguyen57/&quot;&gt;PDF format on my LinkedIn page&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ℹ️ Unlike my other posts which cover serious technical topics, such as Big O space &amp;amp; time complexity of various MS-SQL execution plans, this post is more casual.  It documents a problem that a programmer unexpecting discovers in their life outside of work, &amp;amp; realizes an opportunity to solve that problem using niche skills &amp;amp; knowledge outside of their usual domain of expertise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-problem-to-solve&quot;&gt;The problem to solve&lt;/h2&gt;
&lt;p&gt;The shortest &amp;amp; over-simplified way to describe the problem I had was:&lt;/p&gt;

&lt;p&gt;“Given a specific encounter, what is the highest rank of &lt;a href=&quot;https://tbc.wowhead.com/spell=1064/chain-heal&quot;&gt;chain heal&lt;/a&gt; that I can use sustainably until the encounter ends”&lt;/p&gt;

&lt;p&gt;Since resto shamans suffer from severe mana issues, solving this problem would enable us to maximize &lt;a href=&quot;https://wowwiki-archive.fandom.com/wiki/Healing_comparison#Introduction&quot;&gt;mana efficiency&lt;/a&gt; in any dynamic encounter.&lt;/p&gt;

&lt;p&gt;To simplify this problem further, we can do an intentional (but invalid) assumption: more mana should always equals more healing output. If this were the case, solving the problem simply requires a math formula to ensure that mana usage remains &lt;strong&gt;inversely correlated&lt;/strong&gt; to required output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/P8LZ5TH.png&quot; alt=&quot;Mana efficiency comparison&quot; title=&quot;Mana efficiency comparison&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This diagram depicts mana usage (blue) &amp;amp; required output (red).  Ideally these remain inversely correlated regardless of encounter time.  During times 24-31, we can see that there is insufficient mana to meet output. In order to meet output, we ideally expend mana more efficiently during times 1-8, represented as the grey line. If we were to solve our problem reliably via predictive modelling, our expenditure (blue line) should be matching the grey line.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The above diagram illustrates the problem we are solving using a composite chart. If we look at real data (real charts), we begin understanding just how complex our problem really is. Below are non-composite charts, displaying real data that was &lt;a href=&quot;https://classic.warcraftlogs.com/&quot;&gt;captured&lt;/a&gt; during a Muru twins encounter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0c7l7BJ.png&quot; alt=&quot;Mana level during a muru twins encounter&quot; title=&quot;Mana level during a muru twins encounter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mana level during the encounter (blue). Due to a large number of dynamic variables at play in different moments, mana expenditure rates differ throughout an encounter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XFu2vy8.png&quot; alt=&quot;Raid-wide damage taken&quot; title=&quot;Raid-wide damage taken&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Healing output required (red). Due to damage being dealt non-uniformly during an encounter, some moments require low output whereas others require extremely high output. Ideally, mana is conserved during low-healing periods to then be spent when it’s needed the most. If we were to compare this chart vs our composite chart earlier on, a grey line (ideal mana expenditure) on this chart would always be inversely correlated to the red line.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/tDHFdlx.png&quot; alt=&quot;Healing output&quot; title=&quot;Healing output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Actual output - aqua, lime &amp;amp; red show different chain heal ranks being used.&lt;br /&gt;
Due to mana being a scarce resource, various ranks need to be mixed together to sustainably meet required output throughout an encounter. It’s difficult to identify the exact rank to use in each specific moment, which is the problem we aim to solve through our predictive modelling.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;designing-the-predictive-model&quot;&gt;Designing the predictive model&lt;/h2&gt;
&lt;h3 id=&quot;example-scenario&quot;&gt;Example scenario&lt;/h3&gt;
&lt;p&gt;To help understand our problem in more depth, we can run through a scenario:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ℹ️ Real encounters are significantly more complicated. Hence, this upcoming first example is significantly over-simplified &amp;amp; “cut down” just to help illustrate the problem we are trying to solve. Later in this post, we will deep dive into developing the final formula that is more complex, accurate &amp;amp; pragmatic for a wide range of encounters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;“Suppose we are in an encounter with a target having 100 remaining hit points. If the raid has 20 dps roles each outputting 0.5 damage per second, &amp;amp; assuming a current mana pool level of 1000 mana, can a chain heal rank $vn$ be sustainably casted for this situation?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A good first step to solving any math question is to identify the constants listed in the problem description. Then we can solve for $vn$:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Constant&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Remaining target hit points&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;- Simply put, the raid needs to output 100 damage total to end this encounter.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Number of dps roles&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;- Number of roles in the raid that are specifically there to deal damage (instead of absorbing damage or healing).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Damage per dps raid role&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;- Measured in seconds, this is the average output for each dps role.&lt;br /&gt;- Since this is a run-time variable that fluctuates throughout the course of an encounter, it therefore must be re-calculated at a high frequency to be reliably used as input to any predictive modelling.&lt;br /&gt;- We will treat this variable as a constant just to simplify this first example, &amp;amp; we will dive deeper into event-based triggers later in this post.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mana&lt;/td&gt;
      &lt;td&gt;1000*&lt;/td&gt;
      &lt;td&gt;- Available mana to expend for chain heal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chain heal cast mana cost&lt;/td&gt;
      &lt;td&gt;540&lt;/td&gt;
      &lt;td&gt;- Mana cost to output 1 chain heal.&lt;br /&gt;- Whilst this example uses a fixed constant of 540, the actual cost in real encounters is more complicated (we will dive into tidal focus &amp;amp; t6p4 modifiers’ later in this post).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chain heal cast time&lt;/td&gt;
      &lt;td&gt;2.5&lt;/td&gt;
      &lt;td&gt;- Seconds required to output 1 chain heal.&lt;br /&gt;- We will treat base cast as 2.5 seconds to simplify this first example, however the real cast time is more complicated (we will dive more into haste conversions later in this post).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;For simplicity in this first example, we are assuming the mana pool as static (rather not the effective mana pool). Effective mana pool needs to be considered instead to make our predictive model accurate &amp;amp; reliable. For sake of explanation, this example uses static, &amp;amp; we will dive into effective mana pool calculations later in this post)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With our constants identified, we can solve for $vn$ to verify if it’s a viable rank of chain heal:&lt;/p&gt;

&lt;p&gt;$vn =$ mana surplus at end $\geq 0$&lt;/p&gt;

&lt;p&gt;$vn =$ casts required until end of encounter $-$ mana required for each cast $\geq 0$&lt;/p&gt;

&lt;p&gt;$vn = m - { td \over ct } cm \ge 0$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $m =$ static mana available&lt;/li&gt;
  &lt;li&gt;where $td =$ time to down&lt;/li&gt;
  &lt;li&gt;where $ct =$ chain heal cast time&lt;/li&gt;
  &lt;li&gt;where $cm =$ chain heal mana cost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$vn = m - \left( h \div (n . d) \over ct \right)cm \geq 0$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $h =$ remaining health&lt;/li&gt;
  &lt;li&gt;where $n =$ number of raid members&lt;/li&gt;
  &lt;li&gt;where $d =$ damage per second for each raid member&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$vn = 1000 - \left( 100 \div (20 \div 0.5) \over 2.5 \right)540 \geq 0$&lt;/p&gt;

&lt;p&gt;$\therefore vn \lt 0 \implies vn$ is not a viable chain heal rank&lt;/p&gt;

&lt;h3 id=&quot;problem-solved-right&quot;&gt;Problem solved? …right?&lt;/h3&gt;
&lt;p&gt;Well, as I discovered during testing, not really. This equation only considers a subset of all factors that exist in real encounters. And for our predictive model to be pragmatic &amp;amp; applicable to a wider range of encounters, we have to get our hands dirty.&lt;/p&gt;

&lt;p&gt;Additionally, the equation we’ve made so far makes all sorts of &lt;strong&gt;incorrect assumptions&lt;/strong&gt;. To make the equation pragmatic for real encounters, we need to solve 2 more problems:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Real encounters involve significantly &lt;strong&gt;more factors&lt;/strong&gt;, which change as the encounter moves along. For instance, one can expect to use &lt;a href=&quot;https://tbc.wowhead.com/spell=16190/mana-tide-totem&quot;&gt;Mana Tide&lt;/a&gt; once during an encounter – a certain talent that restores 24% of the max static mana pool. But it has a long cooldown &amp;amp; can usually only be used once. To consider this talent in our equation, it would need to consider mana tide when its &lt;strong&gt;off&lt;/strong&gt; cooldown and also when it’s &lt;strong&gt;on&lt;/strong&gt; cooldown&lt;/li&gt;
  &lt;li&gt;We need to trigger the calculation based on an &lt;strong&gt;event&lt;/strong&gt; (I.e.: integrate into WoW’s event-driven architecture). Having an event-based trigger is a &lt;strong&gt;functional requirement&lt;/strong&gt;, due to this expensive formula needing to be re-calculated at a high frequency, &amp;amp; other factors leading us to having no other optimisation options.
    &lt;ul&gt;
      &lt;li&gt;We can’t use magnificent things like &lt;a href=&quot;https://www.mathworks.com/help/simulink/ug/about-lookup-table-blocks.html&quot;&gt;lookup tables&lt;/a&gt; due to the inputs being dynamic &amp;amp; ever-changing throughout an encounter&lt;/li&gt;
      &lt;li&gt;We can’t cache anything due to a sandbox technical restraint where variable scopes are severely limited when performing programmatic calculations or custom logic in WoW.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s start with our 1st problem: identifying the other factors.&lt;/p&gt;

&lt;h3 id=&quot;identifying-all-influencing-factors&quot;&gt;Identifying all influencing factors&lt;/h3&gt;
&lt;p&gt;Due to this post already being too long for my liking, I’ll jump straight to it - a couple weeks of soul-searching lead me to creating this diagram, containing our list of all “other factors” that a predictive model needs to be reliably applicable to a wide range of encounters.&lt;/p&gt;

&lt;p&gt;Originally sketched out in pencil on the back of a scrap envelope, it has now been converted into a pristine diagram for your viewing pleasure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/w6JnP2t.png&quot; alt=&quot;Overview of all influencing factors&quot; title=&quot;Overview of all influencing factors&quot; /&gt;
&lt;em&gt;All factors that need to be considered are listed in the middle, from “static mp5 data” to “cooldowns data”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static mp5 data&lt;/strong&gt;. Mana is actually restored over time, albeit at a very low &amp;amp; reduced rate (often referred to as the “casting mp5” rate). This is an equation in itself that involves additional sub-factors:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tbc.wowhead.com/spell=27521/mana-restore&quot;&gt;Insightful Earthstorm Diamond&lt;/a&gt; (IED) - an item that has a chance of restoring a fixed amount of mana. More about this math in a second.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tbc.wowhead.com/spell=16190/mana-tide-totem&quot;&gt;Mana Tide&lt;/a&gt; - a skill we already talked about that restores 24% of the max static mana pool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tbc.wowhead.com/item=22832/super-mana-potion&quot;&gt;Mana Potions&lt;/a&gt; - consumables that restore mana. The amount restored is not fixed but rather a range &amp;amp; is therefore influenced by &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;randomness&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tbc.wowhead.com/spell=33736/water-shield&quot;&gt;Water Shield&lt;/a&gt; - a complex mechanic that modifies the “casting mp5” restoration rate. It also restores a fixed amount of mana based on a specific event (the caster needs to take damage to trigger this secondary mechanic), which also happens to have a hidden internal &lt;a href=&quot;https://wowpedia.fandom.com/wiki/Cooldown&quot;&gt;GCD&lt;/a&gt;. Due to our encounters always involving long spans of time, we can thankfully consider this GCD impact negligible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mana Tide&lt;/strong&gt; &amp;amp; &lt;strong&gt;Mana Potions&lt;/strong&gt; can be assumed to have a fixed number of uses per encounter. Mana Tide oftens sits at 1 usage per encounter, whereas Mana Potions often sit at 2 usages per encounter. We will need to fetch this data somehow because our predictive model needs input that identifies whether these can be used at any moment during an encounter.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ℹ️ When we consider all these additional factors, we are now calculating an “accurate” mana pool, compared to our over-simplified mana pool listed in the first example. This is referred to as the “effective mana pool”, which can be used as a reliable input to our predictive model.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;expanding-the-equation&quot;&gt;Expanding the equation&lt;/h3&gt;
&lt;p&gt;Previously, we developed an equation that only considered a subset of factors that exist in real encounters:&lt;/p&gt;

&lt;p&gt;$vn = m - { h \div (n . d) \over ct } cm \geq 0$&lt;/p&gt;

&lt;p&gt;The left-hand side basically asks the question: “how much mana surplus exists if a specific chain heal rank is casted continuously until end of the encounter”. But now that we’ve identified all influencing factors required to make our inputs reliable, we can now substitute these new inputs in lieu of $m$:&lt;/p&gt;

&lt;p&gt;$vn = (mp + mf + mt + mi + mp) - { h \div (n . d) \over ct } cm \geq 0$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $mp =$ current mana level.&lt;/li&gt;
  &lt;li&gt;where $mf =$ static mana restored every 5 seconds.&lt;/li&gt;
  &lt;li&gt;where $mt =$ absolute amount of mana restored from mana tide.&lt;/li&gt;
  &lt;li&gt;where $mi =$ expected mana to be restored from ied.&lt;/li&gt;
  &lt;li&gt;where $mp =$ mana restored from potion usage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Excellent. Now that we’ve expanded the equation, all &lt;strong&gt;&lt;em&gt;high-level&lt;/em&gt;&lt;/strong&gt; equation variables are now defined. We can now start decomposing the equation to identify all &lt;strong&gt;&lt;em&gt;low-level&lt;/em&gt;&lt;/strong&gt; equation variables. This allows us to identify any other remaining factors that are needed to implement our predictive model successfully, &amp;amp; to ensure we can actually source all of the input necessary for our model.&lt;/p&gt;

&lt;h3 id=&quot;decomposing-the-equation-lhs&quot;&gt;Decomposing the equation (LHS)&lt;/h3&gt;

&lt;p&gt;$vn = mp + mf + mt + mi + mp$&lt;/p&gt;

&lt;p&gt;$vn = mp + (mo . td) + (mmp . mtp) + \left( { 5 \over ct } . iedm . iedc \right) + { mpl + mph \over 2 }$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $mp =$ current mana level&lt;/li&gt;
  &lt;li&gt;where $mo =$ static mana restored every &lt;strong&gt;1&lt;/strong&gt; second&lt;/li&gt;
  &lt;li&gt;where $td =$ time to down&lt;/li&gt;
  &lt;li&gt;where $mmp =$ maximum mana level&lt;/li&gt;
  &lt;li&gt;where $mtp =$ percentage of maximum mana level restored from mana tide&lt;/li&gt;
  &lt;li&gt;where $ct =$ chain heal cast time&lt;/li&gt;
  &lt;li&gt;where $iedm =$ mana restored from an IED proc&lt;/li&gt;
  &lt;li&gt;where $iedc =$ probability of IED proc&lt;/li&gt;
  &lt;li&gt;where $mpl =$ minimum mana potion restore&lt;/li&gt;
  &lt;li&gt;where $mph =$ maximum mana potion restore&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;decomposing-the-equation-rhs&quot;&gt;Decomposing the equation (RHS)&lt;/h3&gt;

&lt;p&gt;$vn = \left( h \div (n . d) \over ct \right) cm$&lt;/p&gt;

&lt;p&gt;$vn = \left( h_r \div dps \over ct \right) cm$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $h_r =$ health remaining&lt;/li&gt;
  &lt;li&gt;where $dps =$ the raid’s damage per second&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$vn = { h_r \over dps } \div ct . cm$&lt;/p&gt;

&lt;p&gt;$vn = h_r \div { d \over et } \div ct . cm$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $d =$ the raid’s damage so far as an absolute value&lt;/li&gt;
  &lt;li&gt;where $et =$ encounter time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$vn = h_r \div { h_x - h_c \over et } \div ct . cm$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $h_x =$ target max health&lt;/li&gt;
  &lt;li&gt;where $h_c =$ target current health&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$vn = h_r \div { h_x - h_c \over t_c - t_s } \div ct . cm$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $t_c =$ current time in the encounter, expressed as unix timestamp&lt;/li&gt;
  &lt;li&gt;where $t_s =$ start time of the encounter, expressed as unix timestamp&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;re-composing-the-equation&quot;&gt;Re-composing the equation&lt;/h3&gt;
&lt;p&gt;With the left &amp;amp; right sides decomposed, we can re-compose the 2 sides to finalize our equation:&lt;/p&gt;

&lt;p&gt;$vn = m_e - m_r \ge 0$&lt;/p&gt;

&lt;p&gt;$m_e \implies$ effective mana&lt;/p&gt;

&lt;p&gt;$m_r \implies$ required mana&lt;/p&gt;

&lt;p&gt;$m_e = mp + (mo . td) + (mmp . mtp) + \left( { 5 \over ct } iedm . iedc \right) + { mpl + mph \over 2 }$&lt;/p&gt;

&lt;p&gt;$m_r = h_r \div { h_x - h_c \over t_c - t_s } \div ct . cm$&lt;/p&gt;

&lt;p&gt;$\therefore vn = \left( mp + (mo . td) + (mmp . mtp) + \left( { 5 \over ct } iedm . iedc \right) + { mpl + mph \over 2 } \right) - \left( h_r \div { h_x - h_c \over t_c - t_s } \div ct . cm \right) \ge 0 \implies$ chain heal rank $vn$ is viable&lt;/p&gt;

&lt;p&gt;Where a positive number (greater than 0) indicates mana &lt;strong&gt;surplus&lt;/strong&gt; (i.e.: the chain heal rank is viable), and a negative number indicates mana &lt;strong&gt;deficit&lt;/strong&gt; (i.e.: not viable).&lt;/p&gt;

&lt;p&gt;Fantastic. Now that we have our final formula, the remaining work is to substitute our new variables with constants.&lt;/p&gt;

&lt;h3 id=&quot;researching-the-additional-constants--run-time-variables&quot;&gt;Researching the additional constants &amp;amp; run-time variables&lt;/h3&gt;
&lt;p&gt;Based on the above equation, we can identify the constant variables, &amp;amp; thankfully, their values can be researched using &lt;a href=&quot;https://tbc.wowhead.com/&quot;&gt;the wowhead database&lt;/a&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Variable&lt;/th&gt;
      &lt;th&gt;Unit&lt;/th&gt;
      &lt;th&gt;Constant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; or Run-time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; variable?&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$mp$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$mo$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$td$&lt;/td&gt;
      &lt;td&gt;Seconds (expressed as a time span)&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$mmp$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$mtp$&lt;/td&gt;
      &lt;td&gt;Percentage&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;**&lt;/td&gt;
      &lt;td&gt;0 to 0.24*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$ct$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;**&lt;/td&gt;
      &lt;td&gt;TBD***&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$iedm$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$iedc$&lt;/td&gt;
      &lt;td&gt;Percentage&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;****&lt;/td&gt;
      &lt;td&gt;.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$mpl$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0 or 1800*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$mph$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0 or 3000*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$h_r$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$h_x$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$h_c$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$t_c$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$t_s$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$cm$&lt;/td&gt;
      &lt;td&gt;Numeric&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;TBD*****&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;*Is 0 when item/spell already expended &amp;amp; not available. This means the variable functions as both a constant and a run-time variable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;**The equation uses multiplication instead of addition for mana tide restoration, so whilst technically the mana amount restored is variable, it can be treated as a fixed constant in calculations&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;***Calculating this run-time variable requires a bit more work, which we dive into the next section&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;****Encounters last a long-enough time span &amp;amp; hence; this can be reliably calculated using &lt;a href=&quot;https://samuraitradingacademy.com/trading-expectancy/#:~:text=What%20is%20Trading%20Expectancy%3F,thirty%20to%20be%20statistically%20significant&quot;&gt;expectancy&lt;/a&gt;.), which is simply probability of proc chance multiplied by amount restored for one proc&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*****Value depends on rank used&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After researching most of the variables, the remaining 2 fixed Variables we can try figure out are $cm$ &amp;amp; $c_t$. Based on the wowhead database, the mana costs for each chain heal ranks ($cm$) are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Level for $vn$&lt;/th&gt;
      &lt;th&gt;Base value for  $cm$&lt;/th&gt;
      &lt;th&gt;Actual value for  $cm$*&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$v_5$&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://tbc.wowhead.com/spell=25423/chain-heal&quot;&gt;540&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;459.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$v_4$&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://tbc.wowhead.com/spell=25422/chain-heal&quot;&gt;435&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;369.75&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$v_3$&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://tbc.wowhead.com/spell=10623/chain-heal&quot;&gt;405&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;344.25&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$v_2$&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://tbc.wowhead.com/spell=10622/chain-heal&quot;&gt;315&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;267.75&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$v_1$&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://tbc.wowhead.com/spell=1064/chain-heal&quot;&gt;260&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;221.00&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;*85% reduction after &lt;a href=&quot;https://tbc.wowhead.com/item-set=683/skyshatter-raiment#wh89j34tn97&quot;&gt;tier 6 4-piece bonus&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://tbc.wowhead.com/spell=16217/tidal-focus&quot;&gt;5/5 tidal focus.&lt;/a&gt; These “actual costs” are not displayed in-game in the tooltips, &amp;amp; instead must be manually calculated to obtain the correct values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This gives us $cm$, but we still need to solve for $ct$…&lt;/p&gt;

&lt;h3 id=&quot;solving-the-hasted-cast-time-formula&quot;&gt;Solving the hasted cast time formula&lt;/h3&gt;
&lt;p&gt;As of writing, tbc classic is at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.5.4&lt;/code&gt; (build &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;44171&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This infers a &lt;a href=&quot;https://wowwiki-archive.fandom.com/wiki/Haste&quot;&gt;haste rating conversion rate&lt;/a&gt; of &lt;strong&gt;15.77&lt;/strong&gt; inside of the game engine, which we were able to verify across multiple sources &amp;amp; also by comparing the modified cast time duration displayed on the in-game cast tooltips. Using this verified value, we can now use it to solve the adjusted cast time ($ct$):&lt;/p&gt;

&lt;p&gt;$ct = {b \over e }$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $b =$ base cast time&lt;/li&gt;
  &lt;li&gt;where $e =$ extra casts from additional haste&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$ct = b \div \left( 1 + \left( { hr \over hc } \div 100 \right) \right)$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $hr =$ runtime haste rating&lt;/li&gt;
  &lt;li&gt;where $hc =$ haste rating conversion rate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let $hr = 300$&lt;/p&gt;

&lt;p&gt;$ct = 2.5 \div \left( 1 + \left( { 300 \over 15.77 } \div 100 \right) \right)$&lt;/p&gt;

&lt;p&gt;$\therefore ct = 2.1004$ (4 dp)&lt;/p&gt;

&lt;p&gt;…and that’s the last fixed variable!&lt;/p&gt;

&lt;h3 id=&quot;yay-or-nay&quot;&gt;Yay or Nay?&lt;/h3&gt;
&lt;p&gt;We did it! We have successfully verified our predictive model as being implementable.&lt;/p&gt;

&lt;p&gt;The remaining inputs are run-time variables which need to be fetched via either the TBC API or WA API. We can now start implementing this formula in code!&lt;/p&gt;

&lt;h3 id=&quot;implementing-the-math-equation&quot;&gt;Implementing the math equation&lt;/h3&gt;
&lt;p&gt;There are many different approaches to translating pseudocode into actual code.&lt;/p&gt;

&lt;p&gt;For those fans of the &lt;a href=&quot;https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670&quot;&gt;Code Complete&lt;/a&gt; construction handbook, the ideal weapon of choice is often &lt;a href=&quot;http://ps.informatik.uni-tuebingen.de/teaching/ss15/sct/StudentMaterial/09%20-%20Noah%20Doersing%20-%20pseudocode.pdf&quot;&gt;the Pseudocode Programming Process&lt;/a&gt;. And since we already have our list of inputs, the natural process is to start grouping the inputs into “purposes”, then each “purpose” gets translated into 1 method.&lt;/p&gt;

&lt;p&gt;For reading convenience, the formula will be shown again below:&lt;/p&gt;

&lt;p&gt;$\therefore vn = \left( mp + (mo . td) + (mmp . mtp) + \left( { 5 \over ct } iedm . iedc \right) + { mpl + mph \over 2 } \right) - \left( h_r \div { h_x - h_c \over t_c - t_s } \div ct . cm \right) \ge 0 \implies$ chain heal rank $vn$ is viable&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Input&lt;/th&gt;
      &lt;th&gt;Purpose&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$vn$&lt;/td&gt;
      &lt;td&gt;get ideal chain heal rank&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$ct$&lt;/td&gt;
      &lt;td&gt;get chain heal cast time&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$td$&lt;/td&gt;
      &lt;td&gt;get time to down&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$h_r$ $h_x$ $h_c$ $t_c$ $t_s$ $cm$&lt;/td&gt;
      &lt;td&gt;get mana required until target down&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$mp$&lt;/td&gt;
      &lt;td&gt;get mana pool&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$mo$&lt;/td&gt;
      &lt;td&gt;get mana restoration from mp5 stat&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$mmp$ $mtp$&lt;/td&gt;
      &lt;td&gt;get mana restoration from mana tide&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$iedm$ $iedc$&lt;/td&gt;
      &lt;td&gt;get mana restoration from ied gem&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$mpl$ $mph$&lt;/td&gt;
      &lt;td&gt;get mana restoration from mana potion&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If each table row is 1 method, we would then just need &lt;a href=&quot;https://stackoverflow.com/questions/1451543/what-does-driver-program-mean#:~:text=A%20driver%20is%20generally%20a,outputting%20to%20CSV%20and%20HTML.&quot;&gt;a driver method&lt;/a&gt; to call them in the right order. It doesn’t really matter what we call the driver method (aslong as it makes sense), &amp;amp; I eventually decided to call mine “get_ideal_chr”.&lt;/p&gt;

&lt;p&gt;This gives us a nice pseudocode skeleton to start filling in with actual code:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function get_ideal_chr() end
function get_cast_time() end
function get_ttd() end
function get_ttd_mana() end
function get_mana_pool() end
function get_mana_from_mp5() end
function get_mana_from_tide() end
function get_mana_from_ied() end
function get_mana_from_pot() end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;developing-the-pseudocode-and-lua&quot;&gt;Developing the pseudocode and Lua&lt;/h2&gt;
&lt;h3 id=&quot;get_ideal_chr&quot;&gt;get_ideal_chr&lt;/h3&gt;
&lt;p&gt;Firstly, we need a method that gives us the ideal chain heal rank. It essentially revolves around 2 main points:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ttd in seconds&lt;/li&gt;
  &lt;li&gt;mana cost until ttd is 0 seconds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, if there’s enough mana, it is therefore a viable chain heal rank. My result of translating this into pseudocode is as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin get_ideal_chr 
  for each chain heal rank 
    calculate ttd in seconds 
    calculate mana required assuming ttd is 0 seconds 
    if available mana &amp;gt; mana required 
      return true 
    else 
      return false 
    endif 
  endfor 
end get_ideal_chr 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Based on our skeleton structured defined beforehand, we know that time-to-down method (get_ttd) will be part of our module too. This means we can accept it as a parameter instead of calculating it within this method for each chain heal rank.&lt;/p&gt;

&lt;p&gt;With all the above, we can translate the pseudocode into Lua:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_ideal_chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain_heals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- ideal chain heal rank = max chain heal rank that can be used without going oom for an encounter &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals_count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain_heals_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can_use_rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;can_use_rank&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chains_heals_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;time_diff_formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_time_diff_formatted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Awesome. Next on the skeleton structure is &lt;strong&gt;get_cast_time&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;get_cast_time&quot;&gt;get_cast_time&lt;/h3&gt;
&lt;p&gt;Cast time in WoW is not a fixed number, and is affected by a characteristic called “haste”, which is a positive integer that increases the number of casts that can be performed in a fixed time period:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin get_cast_time 
  calculate base cast time 
  calculate spell haste rating 
  set haste rating conversion rate to 15.77 
  return base cast time / (1 + (spell haste rating / 15.77 / 100)) 
end get_cast_time 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since the base cast time &amp;amp; haste rating conversion rate are fixed constants, we can simply convert them into parameters for this method.&lt;/p&gt;

&lt;p&gt;One final factor to think about is that the spell haste rating is actually a &lt;strong&gt;dynamic&lt;/strong&gt; variable which changes throughout the course of an encounter. For instance, different gear sets will result in different ratings, as well as buffs such as heroism, or procs from special trinkets like &lt;a href=&quot;https://tbc.wowhead.com/item=28190/scarab-of-the-infinite-cycle&quot;&gt;Scarab of the Infinite Cycle&lt;/a&gt;. As such, this dynamic variable will need to come from the blizzard API and therefore it needs to be converted into a parameter.&lt;/p&gt;

&lt;p&gt;With the above consideration, translating our pseudocode gives us the following Lua:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_cast_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;haste_rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;haste_rating_conversion_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- hasted cast time = baseCastTime / extraCastsFromHaste &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_cast_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;haste_rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;haste_rating_conversion_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Whilst a small function, it was incredibly important to spend the necessary time thinking to get this right. With the haste rating being a dynamic variable that changes during encounters, this method can return significantly different results, at a MINIMUM range difference of +/- 20%. This percentage is fed into other calculations which we’ll get to soon, further creating inaccuracies &amp;amp; significantly impacting the final result to the point of the predictive model being ineffective.&lt;/p&gt;

&lt;p&gt;With this out of the way, we move onto one of the most important methods: ttd.&lt;/p&gt;

&lt;h3 id=&quot;get_ttd&quot;&gt;get_ttd&lt;/h3&gt;
&lt;p&gt;ttd = time to down. This is best explained through an example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Assuming an encounter npc with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60,000/100,000&lt;/code&gt; hp&lt;/li&gt;
  &lt;li&gt;Assuming an encounter start timestamp of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00:00:30&lt;/code&gt;, with the current timestamp of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00:01:30&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;We can therefore determine the damage per second (dps) by taking the missing health &amp;amp; dividing it by time spent in the encounter so far. Then given this dps, we can determine the remaining encounter time (ttd) as remaining health / damage per second. So for this example, it turns out to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60000 / ((100000 - 60000) / 90)&lt;/code&gt; which is 135 seconds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And given that this method contains almost solely of dynamic variables, we can write some approximate pseudocode to give us an idea of the Lua, which will definitely need a condition:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin get_ttd 
  calculate encounter time 
  if encounter already finished then 
    return 1 
  endif 

  calculate damage per second 
  return remaining hp / damage per second 
end get_ttd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Some extra things to consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encounter start time is not provided by the blizzard API, but rather the method we use to trigger the calculation. As stated earlier in this post, we have chosen WeakAuras as our calculation trigger, therefore we need to get the encounter start time from the WeakAura API as an input parameter.&lt;/li&gt;
  &lt;li&gt;In terms of time-to-down, the calculation may continue to run even after the encounter is finished. This method should gracefully handle this scenario&lt;/li&gt;
  &lt;li&gt;The hp stats are dynamic &amp;amp; change throughout an encounter. Therefore, they are dynamic variables &amp;amp; must be fetched using the blizzard API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering all the above, we can create the Lua equivalent:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_ttd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aura_expiry_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- time to down (in seconds) = remaining health / damage per second &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aura_expiry_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aura_duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combat_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combat_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 

  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dmg_so_far&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitHealthMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitHealth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dmg_so_far&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combat_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitHealth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Excellent. Now that we can calculate time-to-down in seconds, we can now move on to calculating the mana required (I.e.: assuming time-to-down reaches 0).&lt;/p&gt;

&lt;h3 id=&quot;get_ttd_mana&quot;&gt;get_ttd_mana&lt;/h3&gt;
&lt;p&gt;Since we calculated time-to-down in seconds, this one is thankfully fairly simple. We just need to calculate the number of chain heal casts until time-to-down, then multiply that by the mana cost for the given chain heal rank we are trying to calculate viability for (identified as $vn$ earlier in this post).&lt;/p&gt;

&lt;p&gt;The final aspect to consider is to separate the static from the dynamic variables. In fact, time-to-down, cast time (calculated with spell haste rating) and chain heal rank mana cost are all dynamic variables!&lt;/p&gt;

&lt;p&gt;The pseudocode turned out to be so short &amp;amp; self-explanatory, so let’s jump straight into the juicy Lua:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_ttd_mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- expected mana required until target downed = time to down / chain heal cast time * chain heal mana cost per cast &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;End&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;get_mana_pool&quot;&gt;get_mana_pool&lt;/h3&gt;
&lt;p&gt;Aw yeah, this is the big one.&lt;/p&gt;

&lt;p&gt;This is the method that the whole module revolves around, &amp;amp; as I discovered, it can get fairly complicated. In its simplest form, we need to know the “expected” mana available until time-to-down reaches 0.&lt;/p&gt;

&lt;p&gt;This involves many factors, due to many mana restoration options available for resto shaman. In our specific usage scenarios, the variables are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Current mana (at time of formulae trigger/calculation)&lt;/li&gt;
  &lt;li&gt;Current mp5. This is our passive mana regeneration&lt;/li&gt;
  &lt;li&gt;Mana restored from Mana Tide (24%)&lt;/li&gt;
  &lt;li&gt;Mana restoration expectancy from IED procs&lt;/li&gt;
  &lt;li&gt;Mana restoration from consumables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given the above, we can now start the write the pseudocode:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin get_mana_pool 
  calculate ttd 
  calculate chain heal cast time 
  calculate mana tide mana restore 
  calculate ied mana restore expectancy 
  calculate ied proc chance in percent 
  calculate mana potion restore 
end get_mana_pool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;All of the above are dynamic variables&lt;/strong&gt; &amp;amp; therefore need to be fetched using the TBC &amp;amp; WeakAura APIs. In addition, referring to our skeleton structure, a lot of our calculations have their own methods. Therefore, our Lua would just need to return the concatenated method return values:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_mana_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_tide_restore_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ied_proc_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ied_proc_chance_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- mana pool = the expected amount of remaining mana that is usable for an encounter &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitPower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;player&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_mana_from_mp5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_mana_from_tide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_tide_restore_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_mana_from_ied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ied_proc_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ied_proc_chance_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_mana_from_pot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pot_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With our new driver method, we can now drill into each of these granular methods, which allow us to calculate the total mana available given time-to-down reaches 0.&lt;/p&gt;

&lt;h3 id=&quot;get_mana_from_mp5&quot;&gt;get_mana_from_mp5&lt;/h3&gt;
&lt;p&gt;MP5 is a passive &amp;amp; fixed metric, so we just need to convert the mp5 into mp1, then multiply that by time-to-down (which is also in seconds):&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_mana_from_mp5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- mana regenerated from mp5 = mana regenerated per second (while casting) * time to down seconds &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_mp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetManaRegen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;player&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_mp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;get_mana_from_tide&quot;&gt;get_mana_from_tide&lt;/h3&gt;
&lt;p&gt;As of time of writing this, mana tide restores exactly 24 percent of the base mana pool. Therefore, this method just returns that calculation.&lt;/p&gt;

&lt;p&gt;One thing to consider is that mana tide can be on cooldown during an encounter, begging the question of how many mana tides can be used during a single encounter? Given a cooldown of 5 minutes, and SWP encounters lasting roughly 6-8 minutes, we can safely assume that only 1 mana tide can be used per encounter (including shorter encounters).&lt;/p&gt;

&lt;p&gt;Therefore, our Lua method simply needs to assume 0 mana return when tide is on cooldown, otherwise return the calculation. Very simple &amp;amp; straight-forward, &amp;amp; we can jump straight into the Lua:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_mana_from_tide&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restore_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- mana restored from mana tide = max player mana * percentage of max player mana restored by mana tide &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetSpellCooldown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16190&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitPowerMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;player&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restore_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;get_mana_from_ied&quot;&gt;get_mana_from_ied&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://invezz.com/invest/learn/trading-expectancy/&quot;&gt;“Expectancy”&lt;/a&gt; is a calculation theory that refers to determining an expected result occurring from a chance-based factor, over a large-enough sample size. The simplest way to explain expectancy is using an analogy such as a lotto ticket:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Assuming a lotto ticket has a 1% chance of success&lt;/li&gt;
  &lt;li&gt;Assuming a sample size of 50 (you scratch 50 lotto tickets)&lt;/li&gt;
  &lt;li&gt;Given the above, what is the expected chance of winning the lotto?&lt;/li&gt;
  &lt;li&gt;This would be: .01 * 50 = .5 = 50%&lt;/li&gt;
  &lt;li&gt;Therefore, there is a 50% chance of winning the lotto&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above is obviously an over-simplified example, given our module. Basically, instead of lotto tickets, we are covering IED procs. And instead of sample size, we are covering chain heal casts until time-to-down reaches 0. On top of this, we are trying to calculate the IED proc chance plus the IED mana restoration expectancy.&lt;/p&gt;

&lt;p&gt;With expectancy now explained, we can move onto developing the actual calculation itself. IED procs are triggered PER CAST. This means to calculate the mp5 restored from IED, we need to first calculate the number of chain heal casts per mp5 tick (every 5 seconds), then multiply that against the expected mana return if an IED were to successfully proc.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Number of chain heal casts per mp5 tick: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5 / cast_time&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Expected mana return if IED were to proc: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc_mana * proc_chance_pct&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Therefore expected mana from equipping: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ied = (5 / cast_time) * (proc_mana * proc_chance_pct)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since all variables in the calculation are dynamic, we need to fetch them from the blizzard API and therefore they need to be developed as Lua parameters. With all the above finally considered, we can write the necessary Lua:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_mana_from_ied&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_chance_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- expected mana from ied procs = number of chain heal casts per mp5 tick * expected ied mana restore per chain heal cast &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_chance_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Geez, this is quite a lot to consider given the simplicity of the method, isn’t it?&lt;/p&gt;

&lt;p&gt;If IED contributed little to the available mana given time-to-down reaches 0, then it would not be worth figuring out this equation. But since chain heal cast time is affected by spell haste rating, and with phase 5 offering an enormous amount of spell haste equipment, IED therefore contributes a notable amount of mana &amp;amp; therefore becomes an important consideration.&lt;/p&gt;

&lt;p&gt;Thankfully for us, the last method in our skeleton structure is is a nice simple calculation to close off with.&lt;/p&gt;

&lt;h3 id=&quot;get_mana_from_pot&quot;&gt;get_mana_from_pot&lt;/h3&gt;
&lt;p&gt;Mana potions have a bit of RNG, which restores mana in a range between X &amp;amp; Y. Important factors to consider are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How many potions can be used for an encounter?&lt;/li&gt;
  &lt;li&gt;What should this method return when the item cooldown is active?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As of writing this, the cooldown is 2 minutes (120s). However, the cooldown is only activated if the current mana is less than or equal to the max amount of mana restored. In addition, different encounters last different durations, some are only 3 minutes, whereas others can last 8+ minutes. For simplicity, we can assume only 1 cooldown during the encounter, even if realistically 2 or 3 may be used during longer encounters (such as &lt;a href=&quot;https://tbc.wowhead.com/guides/brutallus-sunwell-plateau-swp-strategy-burning-crusade-classic&quot;&gt;Sunwell’s Brutallus&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The other factor to consider is what to return when cooldown is active. As I eventually figured out, this can simply be 0 - because as noted above, we can reliably assume only 1 active cooldown for the encounter (&amp;amp; most encounters only last long enough for 1 cooldown).&lt;/p&gt;

&lt;p&gt;Lastly, the mana restoration amount is some number between a range of X &amp;amp; Y, &amp;amp; also depends on which type of mana potion is equipped. &lt;a href=&quot;https://tbc.wowhead.com/spell=17580/major-mana-potion&quot;&gt;Major mana potions&lt;/a&gt; restore a much lower amount than &lt;a href=&quot;https://tbc.wowhead.com/item=22832/super-mana-potion&quot;&gt;their Super counterpart&lt;/a&gt;. Therefore, we want to keep X &amp;amp; Y as &lt;strong&gt;dynamic&lt;/strong&gt; variables being passed into this method as input parameters.&lt;/p&gt;

&lt;p&gt;With all the above considered, we simply take the average if cooldown non-active, otherwise 0 if active:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_mana_from_pot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pot_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- expected pot restore per use = avg = (min restore + max restore) / 2 &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetItemCooldown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22832&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pot_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With all the skeleton methods defined in Lua, we can now wire them all up! All we need now is just something to trigger the calculation, &amp;amp; as hinted earlier throughout this post, I chose to leverage WeakAuras to hook into WoW’s event-driven architecture.&lt;/p&gt;

&lt;h2 id=&quot;finalities&quot;&gt;Finalities&lt;/h2&gt;
&lt;h3 id=&quot;triggering-the-lua-code-with-weakauras&quot;&gt;Triggering the Lua code with WeakAuras&lt;/h3&gt;
&lt;p&gt;In terms of the WeakAuras (WA) API, we only need it for the time-to-down calculation. The WA API offers “aura_expiry_time” &amp;amp; “aura_duration” as input parameters, which turns out to be exactly what we were looking for. This gives us the following trigger code:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aura_expiry_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aura_duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we just need to place the methods inside of our trigger function.&lt;/p&gt;

&lt;p&gt;The final factor to consider in Lua is whether we want to &lt;a href=&quot;https://www.lua.org/pil/6.2.html&quot;&gt;forward declare methods&lt;/a&gt; or not. In this instance, I chose to order the methods to require forward declaration, which allowed easier maintainability.&lt;/p&gt;

&lt;h3 id=&quot;final-lua-code&quot;&gt;Final Lua code&lt;/h3&gt;
&lt;p&gt;With our blizzard API variables, WeakAura API variables, constants, skeleton methods defined in Lua &amp;amp; our shiny trigger method, we can now connect it all together using forward method declarations, giving us the final Lua module:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aura_expiry_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aura_duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;base_cast_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;haste_rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;296&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;haste_rating_conversion_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;chain_heals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;442&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;353&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;251&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;chain_heals_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;ied&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;proc_chance_pct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;proc_mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;mana_tide&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;restore_pct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;mana_pot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
   
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_ideal_chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;get_cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;get_ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;get_ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;get_mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;get_mana_from_mp5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;n&quot;&gt;get_mana_from_tide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;get_mana_from_ied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;get_mana_from_pot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;get_time_diff_formatted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;get_time_diff_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_ideal_chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain_heals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- ideal chain heal rank = max chain heal rank that can be used without going oom for an encounter &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals_count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
      &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain_heals_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
      &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
      &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can_use_rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;can_use_rank&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chains_heals_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heals_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;time_diff_formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_time_diff_formatted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain_heal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_cast_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;haste_rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;haste_rating_conversion_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- hasted cast time = baseCastTime / extraCastsFromHaste &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_cast_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;haste_rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;haste_rating_conversion_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_ttd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aura_expiry_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- time to down (in seconds) = remaining health / damage per second &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aura_expiry_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aura_duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combat_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combat_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
      
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dmg_so_far&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitHealthMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitHealth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dmg_so_far&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combat_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitHealth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_ttd_mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- expected mana required until target downed = time to down / chain heal cast time * chain heal mana cost per cast &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_mana_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_tide_restore_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ied_proc_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ied_proc_chance_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- mana pool = the expected amount of remaining mana that is usable for an encounter &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitPower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;player&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_mana_from_mp5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_mana_from_tide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_tide_restore_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_mana_from_ied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ied_proc_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ied_proc_chance_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_mana_from_pot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pot_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_mana_from_mp5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- mana regenerated from mp5 = mana regenerated per second (while casting) * time to down seconds &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_mp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetManaRegen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;player&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_mp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_mana_from_tide&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restore_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- mana restored from mana tide = max player mana * percentage of max player mana restored by mana tide &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetSpellCooldown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16190&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitPowerMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;player&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restore_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_mana_from_ied&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_chance_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- expected mana from ied procs = number of chain heal casts per mp5 tick * expected ied mana restore per chain heal cast &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_mana&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_chance_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_mana_from_pot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pot_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- expected pot restore per use = avg = (min restore + max restore) / 2 &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetItemCooldown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22832&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pot_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pot_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_time_diff_formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- time diff = seconds behind or ahead (based on current mana usage rate) &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_diff_secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_time_diff_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_diff_secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
      
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string.format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%s%.0f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_diff_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;n&quot;&gt;get_time_diff_secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- current mana surplus or deficit = surplus mana / chain heal mana cost per cast &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bonus-statistic-exact-seconds-until-time-to-down-ie-how-far-ahead-or-behind-the-ideal-rank-will-take-us&quot;&gt;Bonus statistic: exact seconds until time to down (i.e.: how far ahead or behind the ideal rank will take us)&lt;/h3&gt;
&lt;p&gt;As a bonus piece of eye candy, we can also calculate the time differential, indicating how far our viable chain heal rank is ahead or behind, in seconds.&lt;/p&gt;

&lt;p&gt;This is an &lt;strong&gt;&lt;em&gt;incredible&lt;/em&gt;&lt;/strong&gt; piece of useful information, &amp;amp; gives us a more accurate judgement on which rank to use. This is because whilst there are 3 chain heal ranks, often the most OPTIMAL rank is actually a mix of 2 ranks. For instance, 60% rank 4, 40% rank 5.&lt;/p&gt;

&lt;p&gt;We can calculate the time delta as available mana given time-to-down reaches 0, divided by the mana cost of each chain heal cast:&lt;/p&gt;

&lt;p&gt;$\Delta = {mmp - mttd \over cm}$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;where $mttd =$ mana required for $ttd$ to reach 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the equation defined, we can now write the Lua equivalent, &amp;amp; add the necessary code to drive the calculations upon trigger:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_time_diff_formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- time diff = seconds behind or ahead (based on current mana usage rate) &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_diff_secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_time_diff_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_diff_secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string.format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%s%.0f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_diff_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 


&lt;span class=&quot;n&quot;&gt;get_time_diff_secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;-- current mana surplus or deficit = surplus mana / chain heal mana cost per cast &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chr_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnitHealth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;haste_rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;haste_rating_conversion_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aura_expiry_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_tide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restore_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_mana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_chance_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mana_pot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ideal_chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_ideal_chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain_heals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain_heals_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mana_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ideal_chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
   
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ideal_chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ideal_chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_diff_formatted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;real-case-studies&quot;&gt;Real case studies&lt;/h3&gt;
&lt;p&gt;Finally, with our predictive model developed &amp;amp; kicking in action, a few (of the many) insightful moments that my formula provided are illustrated below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/BzTuBqV.jpeg&quot; alt=&quot;Illidari council&quot; title=&quot;Illidari council&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Illidari Council, an encounter requiring high mental agility &amp;amp; capacity.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We can see the calculated viability in the bottom-left. This image dictates good mana efficiency management throughout the fight, with rank 1 chain heal being viable, &amp;amp; rank 2 chain being non-viable. The “-2” indicates a deficit of 2 seconds, meaning that a little bit of mana needs to be conserved at the current encounter stage.&lt;/li&gt;
  &lt;li&gt;Since rank 1 is the lowest rank, this means that some casts need to be cancelled. Often healers require innervates due to difficulty in maintaining optimal mana efficiency during this encounter, but thankfully our formula allows us to easily maintain efficiency, thereby saving a critical innervate for another raid member.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/H9sdrlO.png&quot; alt=&quot;Illidan&quot; title=&quot;Illidan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Illidan Stormrage, final boss of Black Temple.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This image illustrates rank 1 as the only viable rank, but also shows large “-107” second deficit, indicating a severe mana shortage at this stage of the fight.&lt;/li&gt;
  &lt;li&gt;Since the formula also considers consumables, this deficiency highlights that over-healing was performed at an earlier stage of this encounter, &amp;amp; for a resto shaman, this is likely during Illidan’s aerial phase or too much single-target healing during the phase 2 fire elementals, which could have been deferred to a more efficient class such as a holy paladin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qzZptct.png&quot; alt=&quot;Reaver&quot; title=&quot;Reaver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fel Reaver in Tempest Keep.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An excellent use case for our formula, as the damage is linear throughout, thereby improving the value of our unique prediction-based formula. Here we see that whilst rank 1 is viable, rank 2 is shown as being possible &amp;amp; should therefore be used over rank 1 to maximize healing-per-second (HPS).&lt;/li&gt;
  &lt;li&gt;We also see a surplus of only “+2” seconds, indicating near-perfect mana efficiency management.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/guQvYgm.jpeg&quot; alt=&quot;Kaelthas&quot; title=&quot;Kaelthas&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kael’thas, final boss of Tempest Keep.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Another great use case for our formula, as the encounter rewards mana preservation during most moments, but extreme healing output during certain moments. Here we see our calculated rank viability in the bottom-left, indicating rank 1 as the only viable option.&lt;/li&gt;
  &lt;li&gt;Unfortunately, it also shows a very severe deficit of “-408” seconds, indicating that we won’t be able to sustain healing to the end of the encounter. Thanks to our formula, we are able to  identify this beforehand &amp;amp; communicate this mana restriction to our teammates ahead of time, which may involve getting a valuable innervate for an upcoming healing-intensive phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rank-progression-during-code-development-of-the-formula&quot;&gt;Rank progression during code development of the formula&lt;/h3&gt;
&lt;p&gt;As we can expect, the predictive model significantly enhanced our healing performance over a very short period of time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LocI3yj.png&quot; alt=&quot;Illidari Council progress&quot; title=&quot;Illidari Council progress&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Illidari Council progress&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/2Zljdcr.png&quot; alt=&quot;Najentus progress&quot; title=&quot;Najentus progress&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Najentus progress&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/WUtdaoZ.png&quot; alt=&quot;Kael’thas progress&quot; title=&quot;Kael’thas progress&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kael’thas progress&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/GxObBOn.png&quot; alt=&quot;Void Reaver progress&quot; title=&quot;Void Reaver progress&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Void Reaver progress&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By leveraging the TBC &amp;amp; WA APIs, we were able to successfully implement a predictive model using math in a Lua module.&lt;/p&gt;

&lt;p&gt;When I look back at these 8 months of iteration, it was full of excitement, exploration &amp;amp; experimentation. Sometimes the head scratching was too much some nights &amp;amp; I had to take a step away &amp;amp; just try again the next night after work.&lt;/p&gt;

&lt;p&gt;But the simple land of Lua kept dragging me back in, &amp;amp; I simply can’t get enough of the language’s simplicity.&lt;/p&gt;

&lt;p&gt;In software engineering, it’s really hard to achieve a massive amount using only simple approaches &amp;amp; a small amount of code. Often the most difficult part of my life is writing less code to achieve more. Figuring out the math for this module was easy, but implementing it in the simplest &amp;amp; most optimized way was the real challenge that I enjoyed overcoming. As you can expect, the first iterations of the formula introduced latency &amp;amp; therefore drove the need for optimisation, which is what is listed in this blog post.&lt;/p&gt;

&lt;p&gt;It was an iterate journey that was an absolute treat to develop, &amp;amp; whilst I’m sad that this journey has finished, I’m also proud of overcoming the logical &amp;amp; technical challenges it presented.&lt;/p&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">This blog post details an 8-month journey in developing predictive math algorithms in WoW &amp;amp; integrating them into the TBC &amp;amp; WeakAura APIs. The WeakAuras integration requires deep knowledge of their API, often requiring experimentation to discover the full extent of their interface due to competing sources of incomplete &amp;amp; outdated documentation.</summary></entry><entry><title type="html">Trust is an uphill battle in Ethereum’s 2.0 blockchain network</title><link href="vitawebsitedesign.github.io/blog/2021/06/27/trust-is-an-uphill-battle-in-ethereums-2-blockchain-network.html" rel="alternate" type="text/html" title="Trust is an uphill battle in Ethereum’s 2.0 blockchain network" /><published>2021-06-27T00:00:00+10:00</published><updated>2021-06-27T00:00:00+10:00</updated><id>vitawebsitedesign.github.io/blog/2021/06/27/trust-is-an-uphill-battle-in-ethereums-2-blockchain-network</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2021/06/27/trust-is-an-uphill-battle-in-ethereums-2-blockchain-network.html">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;People often praise &lt;a href=&quot;https://ethereum.org/en/eth2/&quot;&gt;Ethereum 2.0’s&lt;/a&gt; security, however the security risks posed by new staking protocols is often downplayed. Staking protocols that are &lt;strong&gt;decentralised&lt;/strong&gt; &amp;amp; don’t need to know staker &lt;strong&gt;withdrawal keys&lt;/strong&gt; will play a critical role in eth 2.0 blockchain network security, &amp;amp; is not often discussed in detail.&lt;/p&gt;

&lt;h2 id=&quot;centralized-smoke-and-mirrors&quot;&gt;Centralized smoke and mirrors&lt;/h2&gt;
&lt;p&gt;In Ethereum 2.0, validator maintenance requirements are a &lt;em&gt;relative&lt;/em&gt; hassle (not as high as &lt;a href=&quot;https://docs.solana.com/running-validator/validator-reqs&quot;&gt;Solana&lt;/a&gt;, but still more hassle than most stakers will ever bother with). Since humans like money, lots of ETH holders will just stake their ETH using a protocol that takes custody of their ETH (and/or custody of their withdrawal keys) which upholds the maintenance requirements for them. An example of this would be a &lt;a href=&quot;https://www.binance.com/en&quot;&gt;CEX&lt;/a&gt;, or &lt;a href=&quot;https://lido.fi/&quot;&gt;Lido&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And this means we will have validator pools forming. In fact, &lt;em&gt;we already do&lt;/em&gt;. Lido (a liquid staking provider) &amp;amp; the major centralised exchanges effectively support this functionality already. This is fine - the problem is that these are all &lt;strong&gt;centralised&lt;/strong&gt; or take custody of &lt;strong&gt;withdrawal keys&lt;/strong&gt;, &amp;amp; the security they uphold on their validator hardware remains unknown. Its a system based on trust, which is sub-optimal compared to trust-less systems.&lt;/p&gt;

&lt;p&gt;Hence, these providers are good, but still introduce a &lt;strong&gt;security risk&lt;/strong&gt; to the entire eth 2.0 network that could be solved with decentralisation (a difficult problem to solve, but we will get to that later). People say that the network wont be attacked because the attacker’s ethereum gets slashed, but attackers can hack other validators &amp;amp; burn other people’s deposits instead.&lt;/p&gt;

&lt;p&gt;Low risk &amp;amp; high reward baby! Is it even possible to solve the decentralisation problem whilst &lt;a href=&quot;https://docs.ethhub.io/ethereum-roadmap/ethereum-2.0/sharding/&quot;&gt;preserving other important attributes&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;decentralising-human-trust-is-bloody-hard&quot;&gt;Decentralising human trust is bloody hard&lt;/h2&gt;
&lt;p&gt;This vulnerability of validator pools isn’t discussed alot, &amp;amp; is often downplayed.&lt;/p&gt;

&lt;p&gt;This vulnerability must be removed through decentralisation. Whilst &lt;em&gt;“truly”&lt;/em&gt; decentralised staking protocols don’t exist just yet, there is 1 protocol paving a way towards it. And they solve it by hosting validators on numerous &lt;strong&gt;cloud providers&lt;/strong&gt; which have a strong track record of &lt;a href=&quot;https://azure.microsoft.com/en-au/overview/what-is-iaas/&quot;&gt;IaaS&lt;/a&gt; security. This is in contrast to a &lt;strong&gt;DAO&lt;/strong&gt; approving validator providers.&lt;/p&gt;

&lt;p&gt;This decentralised protocol is called &lt;a href=&quot;https://www.rocketpool.net/&quot;&gt;Rocketpool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While not yet released on the main-net (at time of writing), its decentralises staking via hosting validators on numerous cloud providers. And let’s be honest, the cloud providers such as Microsoft, Amazon &amp;amp; Google are publicly listed companies that have the resources required to maintain a higher level of security &amp;amp; availability, compared to existing providers.&lt;/p&gt;

&lt;p&gt;So this means the centralisation problem is solved.. right?&lt;/p&gt;

&lt;h2 id=&quot;free-lunch-huh-count-me-in&quot;&gt;Free lunch huh? Count me in!&lt;/h2&gt;
&lt;p&gt;Whilst Rocketpool solves the centralisation issue, it is indeed bleeding edge technology.&lt;/p&gt;

&lt;p&gt;Bleeding edge technology solutions such as Rocketpool will usually require trading off 1 quality to improve another one. In Rocketpool’s case:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It requires a high &lt;strong&gt;fee&lt;/strong&gt; from users to cover infrastructure costs&lt;/li&gt;
  &lt;li&gt;It recently encountered a hurdle (aka &lt;strong&gt;0x02&lt;/strong&gt;) where the &lt;a href=&quot;https://github.com/ethereum/eth2.0-specs/pull/2454&quot;&gt;eth 2.0 protocol awards staking rewards to the validator directly&lt;/a&gt;, which in Rocketpool’s case, is actually someone validating for Rocketpool, rather than rocketpool themselves. Thus Rocketpool will be unable to distribute those staking rewards to their token holders (stakers)&lt;/li&gt;
  &lt;li&gt;Its remains to be battle tested. As usual, new smart contracts potentially have &lt;strong&gt;vulnerabilities&lt;/strong&gt; undiscovered by auditors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the most important one that is basically &lt;strong&gt;NOT discussed anywhere&lt;/strong&gt; - these “liquid staking” providers involving conversions between tokens, marking a &lt;a href=&quot;https://www.ato.gov.au/general/capital-gains-tax/&quot;&gt;capital gains tax (CGT)&lt;/a&gt; event &amp;amp; removing potential long-term CGT advantages that usually comes with staking alone.&lt;/p&gt;

&lt;h2 id=&quot;great-success&quot;&gt;Great success?&lt;/h2&gt;
&lt;p&gt;With the above 4 points said (and whilst the internet usually argues 1 of the above), one can state that these tradeoffs are worth the network security improvement. Especially a &lt;a href=&quot;https://defipulse.com/defi-list/&quot;&gt;financially-oriented blockchain&lt;/a&gt; network such as Ethereum.&lt;/p&gt;

&lt;p&gt;From my subjective perspective, Rocketpool’s decentralized staking protocol will be a critical cornerstone (an absolute &lt;em&gt;necessity&lt;/em&gt; , even) in the ethereum 2.0 network.&lt;/p&gt;

&lt;p&gt;If the protocol fails, the potential security of the blockchain network decreases. And guess what happens if Rocketpool doesn’t work? People will move to existing staking protocols that take custody of their &lt;strong&gt;private&lt;/strong&gt; or &lt;strong&gt;withdrawal&lt;/strong&gt; keys. And &lt;em&gt;HACKING&lt;/em&gt; the DAO/company that holds those keys is a lot easier than breaching a reputable cloud provider such as AWS.&lt;/p&gt;

&lt;p&gt;Trust is an uphill battle in Ethereum’s 2.0 blockchain network, &amp;amp; whilst we can shed light on the vulnerabilities &amp;amp; disadvantages of existing staking protocols, Rocketpool appears to be the only protocol brave enough to tackle the problem head-on.&lt;/p&gt;

&lt;p&gt;Will it succeed? Well, we should damn well hope so.&lt;/p&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">Summary People often praise Ethereum 2.0’s security, however the security risks posed by new staking protocols is often downplayed. Staking protocols that are decentralised &amp;amp; don’t need to know staker withdrawal keys will play a critical role in eth 2.0 blockchain network security, &amp;amp; is not often discussed in detail.</summary></entry><entry><title type="html">The illusion of reusability be a harsh mistress</title><link href="vitawebsitedesign.github.io/blog/2021/03/05/the-illusion-of-reusability-be-a-harsh-mistress.html" rel="alternate" type="text/html" title="The illusion of reusability be a harsh mistress" /><published>2021-03-05T00:00:00+11:00</published><updated>2021-03-05T00:00:00+11:00</updated><id>vitawebsitedesign.github.io/blog/2021/03/05/the-illusion-of-reusability-be-a-harsh-mistress</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2021/03/05/the-illusion-of-reusability-be-a-harsh-mistress.html">&lt;p&gt;Reusable libraries are often created to reduce development workload across multiple teams.&lt;/p&gt;

&lt;p&gt;Reusable items in the library can be used in an &lt;em&gt;almost-infinite&lt;/em&gt; combination of scenarios (both currently known &amp;amp; possible new future scenarios), which presents a unique challenge - &lt;strong&gt;how do we design to accommodate for all scenarios?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And on top of the scenario challenge, devs also need to ensure the library &lt;strong&gt;&lt;em&gt;consumers&lt;/em&gt;&lt;/strong&gt; can actually use it &lt;strong&gt;without&lt;/strong&gt; having to make unreasonable tradeoffs. &lt;strong&gt;Flexibility&lt;/strong&gt;. That way it presents an attractable alternative in project plans.&lt;/p&gt;

&lt;p&gt;To solve both the scenario &amp;amp; flexibility challenges, library devs often intentionally make the reusable items simpler, &amp;amp; defer extra behaviour/options to the consumer (e.g.: Facebook has done a fantastic job of Reacts’ &lt;a href=&quot;https://reactjs.org/docs/composition-vs-inheritance.html&quot;&gt;composition vs inheritance&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This post explores an example of reusable library development hell - a reusable front-end component library.&lt;/p&gt;

&lt;h1 id=&quot;simple-example&quot;&gt;Simple example&lt;/h1&gt;
&lt;p&gt;You are part of the dev team that needs to deliver 1 component - a button:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;My button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/K9FWMzI.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/K9FWMzI.png&quot; alt=&quot;Button&quot; title=&quot;Button&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No requirement for padding or margin yet.&lt;/p&gt;

&lt;p&gt;The devs huddle around, &amp;amp; decide to maximize consumer dev speed by hard-coding options. In this case, the devs (us/we) have decided to hard-code padding &amp;amp; margin:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/iBvJ0fP.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/iBvJ0fP.png&quot; alt=&quot;Button with padding and margin&quot; title=&quot;Button with padding and margin&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Green = padding&lt;/li&gt;
  &lt;li&gt;Orange = margin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the consumers can just copy-paste the component, right? They dont even &lt;strong&gt;&lt;em&gt;need&lt;/em&gt;&lt;/strong&gt; to set padding or margin themselves - what a time saver!
At the moment, it only needs to be used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; product with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; specific scenarios.
We cross-check with wireframes The UI team sent us, just to ensure our button can be re-used in the necessary scenarios:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/9pjAYZA.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/9pjAYZA.png&quot; alt=&quot;Scenario&quot; title=&quot;Scenario&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wrapper elements beside &amp;amp; below our button&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/yyVI0Lf.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/yyVI0Lf.png&quot; alt=&quot;Scenario&quot; title=&quot;Scenario&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wrapper element beside our button&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/EbHgo6e.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/EbHgo6e.png&quot; alt=&quot;Scenario&quot; title=&quot;Scenario&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 wrapper elements above our button, with vertical spacing between (to be consistent with the bottom margin of our button)&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It seems our consumers can use our reusable button in all 3 scenarios.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We deliver the component library.&lt;/li&gt;
  &lt;li&gt;The consumers copy-paste the button in their 1 product.&lt;/li&gt;
  &lt;li&gt;Our component, &lt;strong&gt;&lt;em&gt;great success!&lt;/em&gt;&lt;/strong&gt; Pop the champagne!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No probs with the hard-coding the margin or padding.&lt;/p&gt;

&lt;p&gt;In fact… the UI team praises how easy it was to use &amp;amp; how much time it saved them. Salary raises for all!&lt;/p&gt;

&lt;p&gt;Fast forward a year. Now the company wants to ship a new product. Its competing against a potential competitor product, so time-to-market for this new product is &lt;em&gt;critical&lt;/em&gt;. The UI &amp;amp; our (dev) teams choose our fancy reusable library (with our button) to speed things up. We just had a pleasant experience with it, why not?.&lt;/p&gt;

&lt;p&gt;Once again, the UI team sends us wireframes, &amp;amp; we cross-verify them to ensure our reusable button is still re-usable.
Analysis finds that our reusable button now needs to work with 1 &lt;strong&gt;additional&lt;/strong&gt; product, containing 3 &lt;strong&gt;NEW&lt;/strong&gt; scenarios:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/Hofcc2s.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/Hofcc2s.png&quot; alt=&quot;Scenario&quot; title=&quot;Scenario&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button is used inside an element with padding. Due to both the buttons bottom margin &amp;amp; wrapper bottom padding, we have this weird extra gap between the button &amp;amp; the bottom of the wrapper.&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/I72leYH.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/I72leYH.png&quot; alt=&quot;Scenario&quot; title=&quot;Scenario&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Our &quot;reusable&quot; button is re-used twice &amp;amp; placed side-by-side. There is 2x the expected space between them.&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/3BvZ67U.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/3BvZ67U.png&quot; alt=&quot;Scenario&quot; title=&quot;Scenario&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The consumer wants to have a slightly thinner button (a real-world example of this is using a re-usable button with different inner text). Since the padding &amp;amp; margin is hard-coded, we see our button with larger-than-life spacing. &quot;Way too much whitespace&quot; the UI team says.&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ah crap. Our button can’t be re-used in these 3 new scenarios!&lt;/p&gt;

&lt;p&gt;Eventually, the UI team gives feedback about not being able to use our so-called “reusable” component in the new concepts properly. Something about “ugly &amp;amp; inconsistent spacing”.&lt;/p&gt;

&lt;p&gt;As we can see above, the button can be reused fine in the 3 original situations, but the extra 3 situations are a pain in the ass. Due to us hard-coding external &amp;amp; internal spacing (in an attempt to improve the reusability of the button), our consumers are forced to apply hacky workarounds that severely deplete the &lt;a href=&quot;https://www.oreilly.com/library/view/the-pragmatic-programmer/9780135956977/f_0020.xhtml&quot;&gt;technical debt capacity&lt;/a&gt; of the entire company. Even projects not using this library may still be negatively impacted, especially if they need the staff resources which are now blocked on &lt;strong&gt;our&lt;/strong&gt; current button issue.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a reusable library cannot be reasonably reused, its possible that using it poses more downside than upside, thus making it &lt;strong&gt;not&lt;/strong&gt; reusable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If our consumers cant use our reusable button in a pleasing way, will they:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Continue using the library going forward into future products?&lt;/li&gt;
  &lt;li&gt;Is it adding tech debt each time they use it? Are there complaints in the UI team that isn’t being sent to us? (the dev team)&lt;/li&gt;
  &lt;li&gt;Will the risk of company turnover in the UI department now increase due to our flaw?&lt;/li&gt;
  &lt;li&gt;If someone chooses to use our library in their product, does it increase their schedule risk?&lt;/li&gt;
  &lt;li&gt;Is our library actually a blocker? Perhaps this flaw is just getting started…&lt;/li&gt;
  &lt;li&gt;If a consumer uses our library, is the cost worse than the potential benefit?&lt;/li&gt;
  &lt;li&gt;And many other questions, including questioning the technical intelligence of our team.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, this is a &lt;strong&gt;very critical&lt;/strong&gt; design flaw. Imagine a structural engineer designing a skyscraper, but it has a design flaw, such as &lt;a href=&quot;https://news.stanford.edu/pr/01/wtcpostmortem125.html&quot;&gt;misjudging the structural integrity of the base&lt;/a&gt;, exposing it to potential collapse &amp;amp; making it inhabitable. In this case, the consumers (inhabitants) won’t be able to inhabit the building…&lt;/p&gt;

&lt;h1 id=&quot;illusions&quot;&gt;Illusions&lt;/h1&gt;
&lt;p&gt;Depending on the type of mission-critical software you develop, the structural analogy above may be understating or overexaggerated. However the analogy still stands - our library design flaw definitely has a serious flaw.&lt;/p&gt;

&lt;p&gt;We tried our best &amp;amp; attempted to maximize reusability by allowing consumers to copy-paste our component and have it work “out of the box”. Just like a plug-n-play Xbox controller with a PC.&lt;/p&gt;

&lt;p&gt;We maximized reusability initially, but it was all an illusion. Our approach started backfiring when the 2nd product had to be supported. The problem, you see, is that &lt;strong&gt;our approach to reusability design isn’t scalable&lt;/strong&gt;. And because of this unforeseen matter, we now need to re-write our component, re-deploy, re-test both products etc.&lt;/p&gt;

&lt;p&gt;It gets even worse. In reality, reusable components are used in more than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; products (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; scenarios). Developing successful reusable libraries is hard work, a tricky mistress. And we just created a prison without knowing it, &amp;amp; our team is now trapped inside, chewing on stale moldy bread &amp;amp; banging empty metal mugs against prison railings.&lt;/p&gt;

&lt;h1 id=&quot;prison-break&quot;&gt;Prison break&lt;/h1&gt;
&lt;p&gt;If you recall, the 2 &lt;em&gt;challenges&lt;/em&gt; our team had to overcome were:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Support all necessary &lt;strong&gt;scenarios&lt;/strong&gt; (current known future ones, as well as future unknown scenarios)&lt;/li&gt;
  &lt;li&gt;Support consumers so that they can work at their best &lt;strong&gt;potential&lt;/strong&gt; (i.e.: flexibility + productivity + creativity)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And we tried to overcome both challenges by hard-coding spacing.
But due to our flawed approach to reusability design, we failed to overcome both challenges.
It is, however, indeed possible to overcome both challenges &lt;strong&gt;SCALABLY&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;brilliance-encased-in-simplicity&quot;&gt;Brilliance encased in simplicity&lt;/h1&gt;
&lt;p&gt;Think of &lt;a href=&quot;https://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt;. It is the epitome of reusable component web libraries (excluding native platform SDK’s).
The &lt;a href=&quot;https://getbootstrap.com/2.3.2/components.html&quot;&gt;components&lt;/a&gt; the library provides are super-simple. In fact, the components are so simple, it sometimes gets questionnable.&lt;/p&gt;

&lt;p&gt;They’re so…. simple, right? They’re just basic wrappers around HTML elements with a tiny CSS class slapped on to provide a default styling “out of the box”. Stupid? No, not stupid. In fact, the simplicity is ABSOLUTELY &lt;strong&gt;brilliant&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Challenge #1: “Support all necessary scenarios (current known future ones, as well as future unknown scenarios)”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By having stupidly simple components, Bootstrap components are so flexible that they can be used in the significant majority of scenarios.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Challenge #2: “Support consumers so that they can work at their best potential (i.e.: flexibility + productivity + creativity)”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And since the html structure &amp;amp; styling is simple, consumers can apply their own styling to achieve their needs quickly. Need a different colour? A different font style? Different spacing? Different border? Different box sizing model? Bam, easy peasy.&lt;/p&gt;

&lt;p&gt;Judging by the significant commercial adoption of Bootstrap, i’d say the Facebook devs used the &lt;strong&gt;CORRECT&lt;/strong&gt; approach in designing reusable libraries, a &lt;em&gt;truly&lt;/em&gt; scalable approach!&lt;/p&gt;

&lt;h1 id=&quot;i-didnt-hear-no-bell&quot;&gt;I didn’t hear no bell&lt;/h1&gt;
&lt;p&gt;Us &amp;amp; our team have been forced into a difficult situation - we now NEED to rewrite our reusable UI button to unblock our UI team, so that our company can beat the competitor to the market:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;With this new &lt;strong&gt;&lt;em&gt;scalable&lt;/em&gt;&lt;/strong&gt; reusability design approach in mind, lets approach the button design differently.&lt;/li&gt;
  &lt;li&gt;Instead, we will make our button simpler, &amp;amp; defer extra options to consumers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this approach, we are hoping to overcome the 2 challenges in an inexpensive manner.&lt;/p&gt;

&lt;p&gt;Again, lets revisit the 3 scenarios our button received complaints about:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/Hofcc2s.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/Hofcc2s.png&quot; alt=&quot;Scenario&quot; title=&quot;Scenario&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unscalable approach: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button is used inside an element with padding. Due to both the buttons bottom margin &amp;amp; wrapper bottom padding, we have this weird extra gap between the button &amp;amp; the bottom of the wrapper.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scalable approach: our button &lt;strong&gt;no longer&lt;/strong&gt; has extra bottom padding. The consumer has to write some extra lines of CSS, but they can use the button the exact way they want. They can now ACTUALLY USE our button!&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/I72leYH.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/I72leYH.png&quot; alt=&quot;Scenario&quot; title=&quot;Scenario&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unscalable approach: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Our &quot;reusable&quot; button is re-used twice &amp;amp; placed side-by-side. There is 2x the expected space between them.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scalable approach: our button &lt;strong&gt;no longer&lt;/strong&gt; specifies margin. The buttons neatly sit side-by-side &amp;amp; the UI team is relieved&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/3BvZ67U.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/3BvZ67U.png&quot; alt=&quot;Scenario&quot; title=&quot;Scenario&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unscalable approach: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The consumer wants to have a slightly thinner button (a real-world example of this is using a re-usable button with different inner text). Since the padding &amp;amp; margin is hard-coded, we see our button with larger-than-life spacing. &quot;Way too much whitespace&quot; the UI team says.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scalable approach: our button &lt;strong&gt;no longer&lt;/strong&gt; specifies padding or margin. The consumer is able to decrease the button width, &amp;amp; is able to define the button’s padding &amp;amp; margin in several ways to achieve their exact vision (e.g.: percentage of REM based on the button’s wrapper width)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Pats on the back for everyone. The consumers need to write &lt;strong&gt;a bit of extra code&lt;/strong&gt;, but that overhead is so tiny considering the significant productivity advantage our “new” button provides. Now &lt;em&gt;THATS&lt;/em&gt; a smart tradeoff. What a cracker!&lt;/p&gt;

&lt;p&gt;We were able to apply our new scalable approach to reusability &amp;amp; overcome both challenges. Thank god!&lt;/p&gt;

&lt;h1 id=&quot;whew-that-was-a-close-one&quot;&gt;“Whew, that was a close one!”&lt;/h1&gt;
&lt;p&gt;If consumers start facing serious business or technical issues, the library obviously has a critical design flaw. It needs to be addressed at some point, before it spirals out of control. If you caught onto the design issue early, good on you. And if you have the time to fix it today, then even better.&lt;/p&gt;

&lt;p&gt;But ignoring the importance of design flaws like this can lead to…&lt;/p&gt;

&lt;h1 id=&quot;absolute-disaster&quot;&gt;Absolute disaster!&lt;/h1&gt;
&lt;p&gt;So what happens if critical design flaws are misunderstood &amp;amp; treated as “not important”?&lt;/p&gt;
&lt;h3 id=&quot;1-staff-cant-do-their-job-to-the-best-of-their-ability&quot;&gt;1. Staff cant do their job to the best of their ability&lt;/h3&gt;
&lt;p&gt;Developers just end up creating their own reusable library, usually as a Skunkworks project, &amp;amp; start migrating over to it. Often, they are just frustrated by the business expense &amp;amp; take things into their own hands. Good developers dont put up with crap software, &amp;amp; will take initiative &amp;amp; do this.&lt;/p&gt;

&lt;p&gt;It can turn out surprisingly well (ignoring the business expense, stress from late nights &amp;amp; potential turnover). Then the old reusable library just gets left in the dust because it becomes an unattractive alternative during project planning.&lt;/p&gt;

&lt;p&gt;Example: if a front-end “shared” component library requires designers to &lt;strong&gt;change&lt;/strong&gt; their workflow, the time “saved” by developers using the reusable library &lt;strong&gt;is actually just shifted&lt;/strong&gt; onto the designers. In this case, the reusable library does NOT actually save effort (because it just shifts extra work to someone else). From the library developers perspective, it saves time. From everyone elses perspective, its an &lt;strong&gt;&lt;em&gt;absolute catastrophe&lt;/em&gt;&lt;/strong&gt;! The responsibility unfortunately lies on the engineers in this case, which intentionally put those design flaws in place &amp;amp; let it be.&lt;/p&gt;

&lt;h3 id=&quot;2-the-technical-debt-eventually-become-too-visible--starts-hindering-development-agility-to-the-point-where-all-current-projects-get-dropped&quot;&gt;2. The technical debt eventually become too visible, &amp;amp; starts hindering development agility to the point where all current projects get dropped&lt;/h3&gt;
&lt;p&gt;Put simply, the reusable library gets thrown out &amp;amp; redone:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Re-architect&lt;/li&gt;
  &lt;li&gt;Re-design&lt;/li&gt;
  &lt;li&gt;Re-write&lt;/li&gt;
  &lt;li&gt;Re-integrate&lt;/li&gt;
  &lt;li&gt;Re-test&lt;/li&gt;
  &lt;li&gt;Re-deploy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plus all those:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;meetings&lt;/li&gt;
  &lt;li&gt;turnover&lt;/li&gt;
  &lt;li&gt;ad-hoc dev chats&lt;/li&gt;
  &lt;li&gt;the inevitable political pressure from upper management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;“There’s only a few problems so far, so lets keep going in this direction!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you ever hear this, keep in mind that its important to think long &amp;amp; hard on design decisions that can be potentially expensive in the future.&lt;/p&gt;

&lt;p&gt;An approach of &lt;em&gt;intentionally&lt;/em&gt; pushing design flaws to the side because “it makes my life easier” isn’t an acceptable approach. Companies rely on developers to be responsible &amp;amp; to act in the best interest of the company…&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Software is &lt;strong&gt;hard&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Engineers make mistakes &lt;strong&gt;all&lt;/strong&gt; the time.&lt;/li&gt;
  &lt;li&gt;That is fine, it happens. I make mistakes too.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But &lt;strong&gt;&lt;em&gt;intentionally&lt;/em&gt;&lt;/strong&gt; making mistakes isn’t a responsible approach to development, ESPECIALLY if it comes at the expense of other teams, your company, &amp;amp; all your other colleagues that rely &amp;amp; put faith in you.&lt;/p&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">Reusable libraries are often created to reduce development workload across multiple teams.</summary></entry><entry><title type="html">Blindly applying defensive programming is a recipe for disaster</title><link href="vitawebsitedesign.github.io/blog/2021/02/20/blindly-applying-defensive-programming-is-a-recipe-for-disaster.html" rel="alternate" type="text/html" title="Blindly applying defensive programming is a recipe for disaster" /><published>2021-02-20T00:00:00+11:00</published><updated>2021-02-20T00:00:00+11:00</updated><id>vitawebsitedesign.github.io/blog/2021/02/20/blindly-applying-defensive-programming-is-a-recipe-for-disaster</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2021/02/20/blindly-applying-defensive-programming-is-a-recipe-for-disaster.html">&lt;p&gt;Depending on the system requirements, fault tolerance may be a priority for your product. This is especially true in mission-critical systems that need to consider high availability, data integrity, security &amp;amp; physical safety.&lt;/p&gt;

&lt;p&gt;For instance, what happens when the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cowboy_coding&quot;&gt;“cowboy approach”&lt;/a&gt; is applied when developing a physical medical device without considering safety of humans (e.g.: patient, nurse, doctor). What about an &lt;strong&gt;offensive&lt;/strong&gt; programming approach instead?&lt;/p&gt;

&lt;p&gt;Of course, on the flip side, an overly &lt;strong&gt;defensive&lt;/strong&gt; approach that’s not necessary may introduce unnecessary excessive schedule risk &amp;amp; be a terrible choice.&lt;/p&gt;

&lt;p&gt;This brings us to the approach: being careful
The official term for this is: &lt;strong&gt;defensive programming&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;ah-yes-thems-big-words&quot;&gt;Ah, yes, thems big words…&lt;/h1&gt;
&lt;p&gt;Basically, you just assume that all data is suss, &amp;amp; all the bad possibilities (such as module &amp;amp; subsystem crashes) can happen at any moment.&lt;/p&gt;

&lt;p&gt;You, as a developer, assume that, and only THEN do you start touching code. “Defensive programming” is really just that, we don’t &lt;em&gt;need&lt;/em&gt; to overcomplicate theories here. This blog is about pragmatism. Useless talk just to sound smart has no place here.&lt;/p&gt;

&lt;p&gt;To help us understand how to be &lt;strong&gt;defensive&lt;/strong&gt; &amp;amp; identify the consequences, let’s put on our imagination hat &amp;amp; assume we are developers on an autonomous trading system (mission critical). For simplicity, we’ll just pretend to freeze time, &amp;amp; put a magnifying glass over just 1 layer in just 1 subsystem.&lt;/p&gt;

&lt;p&gt;Let’s say… a client-side user interface layer doing a simple HTTP AJAX call to 1 API endpoint, &amp;amp; the UI is used by an operator (sentinel role).&lt;/p&gt;

&lt;h1 id=&quot;adventure-time&quot;&gt;Adventure time&lt;/h1&gt;
&lt;p&gt;When you think about it, a &lt;em&gt;lot&lt;/em&gt; of suss things can happen between a client &amp;amp; server. That sexy boundary called the internet is a dangerous void. For instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xhr error (client side)&lt;/li&gt;
  &lt;li&gt;Client and/or server Timeout&lt;/li&gt;
  &lt;li&gt;All possible HTTP codes (including redirects)&lt;/li&gt;
  &lt;li&gt;Auth issues&lt;/li&gt;
  &lt;li&gt;Client-side middleware (e.g.: &lt;a href=&quot;https://redux-observable.js.org/docs/basics/Epics.html&quot;&gt;Redux epics&lt;/a&gt; failing)&lt;/li&gt;
  &lt;li&gt;Dependency failures (client side)&lt;/li&gt;
  &lt;li&gt;Client and/or server caching issues&lt;/li&gt;
  &lt;li&gt;And of course, bugs!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But let’s slow down a bit, keep it simple, &amp;amp; just assume 1 of the factors listed above.
Lets be &lt;strong&gt;defensive&lt;/strong&gt; by assuming that the API is contactable &amp;amp; it may return &lt;strong&gt;500&lt;/strong&gt;, even if the API documentation doesn’t include a 500.&lt;/p&gt;

&lt;p&gt;If our user interface did a simple AJAX call to 1 API in JavaScript via jQuery, it may look something like:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the API goes down, the promise will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject&lt;/code&gt; internally. And gosh, we’re such brave programmers. Running naked here - no catch!&lt;/p&gt;

&lt;p&gt;So we’re being defensive, great. The next step in the defensive programming approach, is to check the situation we’re knee-deep in. Just lean back in your chair, let out a sighful breath, and reflect. Our &lt;strong&gt;CURRENT&lt;/strong&gt; situation is a client-side program, being used be an &lt;strong&gt;operator&lt;/strong&gt;, that is contacting an API. As a &lt;strong&gt;defensive programmer&lt;/strong&gt;, we should to notify the operator that the API is actually down, &lt;em&gt;right&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;You don’t want to leave the operator guessing or waiting, otherwise the trading algorithms could go unmonitored. And that presents significant financial risk to your firm. Software is hard, &amp;amp; risks will always be present &amp;amp; devs will always make mistakes. But dont intentionally make a mistake that can be cheaply avoided. That is a serious no-no.&lt;/p&gt;

&lt;h2 id=&quot;defensive-programming-is-mostly-about-complex-holistic-self-reflection&quot;&gt;Defensive programming is mostly about complex, holistic self-reflection&lt;/h2&gt;
&lt;p&gt;Again, lets assess our situation. A financial mission-critical system with a human operator acting as a sentinel over trading algorithms. Now lets assume &lt;strong&gt;all&lt;/strong&gt; data is suss, &amp;amp; &lt;strong&gt;everything&lt;/strong&gt; possibly bad can happen.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A productive way to defensively program is to think of the worst possible scenarios, then work backward to the “safer” scenarios. The worst scenarios have &lt;a href=&quot;https://en.wikipedia.org/wiki/Failure_mode_and_effects_analysis&quot;&gt;low detectability, a high occurrence, &amp;amp; a high severity with significant consequences&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For instance, if a major market crash occurred (Japan, GFC, covid, commodities etc) &amp;amp; all of a sudden, our 1 API may experience a higher load. If there’s not enough company short-term funds (i.e.: pre-approved short-term liquidity) to elastically scale the backend to the very expensive levels necessary, the backend may get overloaded from all the data mining caused by the new information influx being posted on the internet (due to the financial crisis).&lt;/p&gt;

&lt;p&gt;So in this case, the operator ABSOLUTELY NEEDS to know that somethings wrong, so &lt;strong&gt;they&lt;/strong&gt; can then take appropriate action &amp;amp; keep the firm’s financial risk at bay during such an event.&lt;/p&gt;

&lt;h2 id=&quot;ah-mate-this-is-easy&quot;&gt;Ah mate, this is easy!&lt;/h2&gt;
&lt;p&gt;So as a defensive programmer, you’d simply catch the HTTP call… right?&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nope, because whilst certain applications can show console-level errors, its usually hidden behind a menu. Our operator (who isn’t a dev) probably wouldn’t keep that pane open 24/7. Even if they did see the console message, they may not be technically capable to decrypting what the hell the message meant.&lt;/p&gt;

&lt;p&gt;We thought we applied “defensive programming”. We thought we were smart! Oh how wrong we were, such foolishness. The humility is unbearable! Our thinking part is correct, but we just need to add a bit more sauce to &lt;strong&gt;effectively&lt;/strong&gt; make use of defensive programming.&lt;/p&gt;

&lt;h2 id=&quot;right-lets-just-show-something-in-the-ui-then&quot;&gt;Right, lets just show something in the UI then?&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nope, we’re still screwed here unfortunately. If the console error logging mechanism fails (e.g.: a weakly-typed referenced variable is passed in, but was then renamed), the toast doesn’t show. Keep in mind, this is a mission critical system where everything can turn to crap in a single millisecond.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There we go bois. Good defensive programming, rightttttttttt?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any failures in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toast.show&lt;/code&gt; need to take a defensive programming approach. If it doesn’t &amp;amp; the code is outside out of your control (e.g.: a third-party toast library), your mission-critical application should NOT use it. You absolutely need to find a &lt;strong&gt;safe alternative&lt;/strong&gt;, or build one in-house. Otherwise you could be posing significant legal risk for your firm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All things considered, this level of defensive programming is sufficient (for our very simple scenario of 1 HTTP Ajax call).&lt;/p&gt;

&lt;h1 id=&quot;neato-im-now-gonna-start-being-defensive-the-words-defensive-programming-have-a-nice-ring-to-it&quot;&gt;Neato! I’m now gonna start being defensive. The words “Defensive programming” have a nice ring to it!&lt;/h1&gt;
&lt;p&gt;All things in software are contextual. If someone just says “lets do defensive programming” without actually describing a scenario, they probably need to have a closer look at the exact situation.&lt;/p&gt;

&lt;p&gt;You can’t be defensive in all situations. It can be counterproductive when you’re NOT developing mission-critical applications. For instance, if you’re developing an internal-use-only library, the optimal approach may be &lt;strong&gt;OFFENSIVE&lt;/strong&gt; programming, &amp;amp; defer additional handling to the consumers of your library. In this case, &lt;strong&gt;DEFENSIVE&lt;/strong&gt; programming may actually &lt;em&gt;increase&lt;/em&gt; schedule risk with negligible benefit (although at least you could say “I’m a defensive programmer, yay!”). Talk about tradeoffs, huh.&lt;/p&gt;

&lt;p&gt;Analyse the specific situation at hand, use common sense, &amp;amp; take the right approach. Don’t just barge through the door like coolaid man &amp;amp; exclaim “we should be defensive in everything we do”. Software engineering is complex &amp;amp; theoretical, so make sure your choice of approach makes sense before committing on it.&lt;/p&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">Depending on the system requirements, fault tolerance may be a priority for your product. This is especially true in mission-critical systems that need to consider high availability, data integrity, security &amp;amp; physical safety.</summary></entry><entry><title type="html">Situational concurrency control with SQL Server locks</title><link href="vitawebsitedesign.github.io/blog/2021/02/06/situational-concurrency-control-with-sql-server-locks.html" rel="alternate" type="text/html" title="Situational concurrency control with SQL Server locks" /><published>2021-02-06T00:00:00+11:00</published><updated>2021-02-06T00:00:00+11:00</updated><id>vitawebsitedesign.github.io/blog/2021/02/06/situational-concurrency-control-with-sql-server-locks</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2021/02/06/situational-concurrency-control-with-sql-server-locks.html">&lt;h1 id=&quot;lock-control&quot;&gt;Lock control&lt;/h1&gt;
&lt;p&gt;Locks are a trade between concurrency and performance. Locks take up &lt;em&gt;space&lt;/em&gt; (depending on the table’s primary key), and they have an &lt;em&gt;efficiency&lt;/em&gt; overhead.&lt;/p&gt;

&lt;p&gt;SQL Server allows you to control this “trade”, by determining lock behaviour through a “setting” called &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/t-sql/statements/set-transaction-isolation-level-transact-sql?view=sql-server-ver15&quot;&gt;isolation levels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So depending on existing application requirements &amp;amp; future requirements volatility, choosing the &lt;strong&gt;appropriate&lt;/strong&gt; level could be useful.&lt;/p&gt;

&lt;p&gt;TLDR:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Read uncommited&lt;/code&gt;: no shared or exclusive locks are used&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Read committed&lt;/code&gt;: shared and exclusive locks are used&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repeatable Read&lt;/code&gt;: shared locks are held until end of transaction&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serializable&lt;/code&gt;: locks now cover a range of rows (instead of just singular rows)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is also a level called “Snapshot”, which involves new SQL Server &lt;a href=&quot;https://support.esri.com/en/technical-article/000013039&quot;&gt;settings&lt;/a&gt; &amp;amp; a concept called “row versioning”. For simplicity, Snapshot wont be covered here&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;read-uncommitted&quot;&gt;Read Uncommitted&lt;/h2&gt;
&lt;p&gt;Maximum speed! No locks means no overhead, but it also means no concurrency control. Its a free-for-all!&lt;/p&gt;

&lt;p&gt;Since there’s no locks, rows can be updated &amp;amp; read mid-transaction. For example:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Transaction A&lt;/th&gt;
      &lt;th&gt;Transaction B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update row&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Commit transaction&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This is fine, transaction B still read the value which still ends up being correct anyways.&lt;/p&gt;

&lt;p&gt;But what if transaction A fails?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Transaction A&lt;/th&gt;
      &lt;th&gt;Transaction B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update row&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tries to commit transaction&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Error, rolls back transaction&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Ah nuts! Now transaction B has the wrong value! If this situation would be a problem for your application, you might have to use a &lt;em&gt;stricter&lt;/em&gt; isolation level…&lt;/p&gt;

&lt;h2 id=&quot;read-committed-default&quot;&gt;Read Committed (default)&lt;/h2&gt;
&lt;p&gt;As the default level, shared &amp;amp; exclusive locks are used. Lets continue our adventure from last time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Transaction A&lt;/th&gt;
      &lt;th&gt;Transaction B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update row&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tries to commit transaction&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Error, rolls back transaction&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We  guchi, guchi wearing prada.&lt;/p&gt;

&lt;p&gt;Transaction A places an exclusive lock on the row, then Transaction B tries to read the row (by placing a shared lock). Since exclusive &amp;amp; shared locks are incompatible, transaction B sits there, patiently, in silence, until transaction A finishes its’ dance.&lt;/p&gt;

&lt;p&gt;And hence, transaction B would finally resume, &amp;amp; read the correct value.&lt;/p&gt;

&lt;h3 id=&quot;whew-crisis-averted&quot;&gt;Whew! Crisis averted…?&lt;/h3&gt;

&lt;p&gt;Crap. The above example is just 1 of the 2 possible scenarios. The other scenario is that Transaction B starts first:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Transaction A&lt;/th&gt;
      &lt;th&gt;Transaction B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update row&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In read committed, shared locks are actually released immediately after the read. To think of this another way:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Transaction A&lt;/th&gt;
      &lt;th&gt;Transaction B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row (shared lock)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Shared lock released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update row (exclusive lock)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Transaction end&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As mentioned before, exclusive &amp;amp; shared locks are incompatible. Whoever arrives 2nd has to wait.&lt;/p&gt;

&lt;p&gt;But since shared locks are released immediately after the read, Transaction A still gets dibs &amp;amp; can update the row - even though Transaction B is still halfway through!&lt;/p&gt;

&lt;p&gt;This becomes an issue, because if Transaction B were to do another read &lt;strong&gt;after&lt;/strong&gt; the row gets updated, it would read different data:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Transaction A&lt;/th&gt;
      &lt;th&gt;Transaction B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row (shared lock)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Shared lock released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update row (exclusive lock)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction end&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row (shared lock)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Transaction end&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So if Transaction B were something like:&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT col FROM table&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then Transaction A barged in halfway through (before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF&lt;/code&gt; statement):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UPDATE table SET col = 0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF&lt;/code&gt; statement (in Transaction A) would return true, even though Transaction B set the column to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; beforehand.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Next week, on season 2 of transactions attacking eachother…&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;repeatable-read&quot;&gt;Repeatable Read&lt;/h2&gt;
&lt;p&gt;Shared locks are held until end of transaction. Continuing our adventure:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Transaction A&lt;/th&gt;
      &lt;th&gt;Transaction B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row (shared lock)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Shared lock released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update row (exclusive lock)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction end&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row (shared lock)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Transaction end&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;now becomes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Transaction A&lt;/th&gt;
      &lt;th&gt;Transaction B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row (shared lock)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shared lock NOT released&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction start&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update row (exclusive lock)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction end&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Read row (shared lock)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Transaction end&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And we’re good! When Transaction A tries to apply exclusive lock, it has to wait there patiently because the Transaction B’s shared lock is still on the row.&lt;/p&gt;

&lt;p&gt;So&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT col FROM table&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cant be “interrupted” halfway through, &amp;amp; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF&lt;/code&gt; statement works as expected. Only once Transaction B ends, the shared lock is released, then Transaction A’s exclusive lock is applied to do the update:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UPDATE table SET col = 0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;serializable&quot;&gt;Serializable&lt;/h2&gt;
&lt;p&gt;This isolation level takes the cake. Database developers get down on their knees &amp;amp; pray to the SQL gods for whoever invented this level!&lt;/p&gt;

&lt;p&gt;The previous levels covered common cases, but there’s 1 extra scenario that often happens in applications, &amp;amp; thats when a SQL statement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; a range of rows, &amp;amp; then another Transaction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt; rows in that range.&lt;/p&gt;

&lt;p&gt;Example table:
| Id | Value |
|—-|——-|
| 1  | 1     |
| 2  | 100   |&lt;/p&gt;

&lt;p&gt;Then a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT Id FROM table WHERE Value BETWEEN 1 AND 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which grabs rows with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Id&lt;/code&gt; 1 &amp;amp; 2. No problems so far right?&lt;/p&gt;

&lt;p&gt;Oh wait a second, whats that thing called when multiple transactions bump heads? Oh yeah, HELL&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO table (Value) VALUES (10)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this runs before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF&lt;/code&gt; statement, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF&lt;/code&gt; statement will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;. The original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; got 2 rows, but now there’s 3 rows in DB, &amp;amp; now the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF&lt;/code&gt; statement is checked with outdated data!&lt;/p&gt;

&lt;p&gt;Why must programming be so complicated! Nothing to worry, because the Microsoft SQL Server devs took some good legal substances &amp;amp; hallucinated a new isolation level to make the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt; wait until the first transaction finishes.&lt;/p&gt;

&lt;p&gt;And thus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERIALIZABLE&lt;/code&gt; was born. To recap the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; again:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT Id FROM table WHERE Value BETWEEN 1 AND 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In Serializable, shared &amp;amp; exclusive locks apply to a range of rows (instead of a single row). This means that if another transaction tries to shove another row between that range, it will be blocked.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO table (Value) VALUES (10)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Boom! Problem solved.&lt;/p&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">Lock control Locks are a trade between concurrency and performance. Locks take up space (depending on the table’s primary key), and they have an efficiency overhead.</summary></entry><entry><title type="html">Adventuring into the wilderness of concurrent SQL Server locks</title><link href="vitawebsitedesign.github.io/blog/2021/01/30/adventuring-into-the-wilderness-of-concurrent-sql-server-locks.html" rel="alternate" type="text/html" title="Adventuring into the wilderness of concurrent SQL Server locks" /><published>2021-01-30T00:00:00+11:00</published><updated>2021-01-30T00:00:00+11:00</updated><id>vitawebsitedesign.github.io/blog/2021/01/30/adventuring-into-the-wilderness-of-concurrent-sql-server-locks</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2021/01/30/adventuring-into-the-wilderness-of-concurrent-sql-server-locks.html">&lt;p&gt;SQL Server reads &amp;amp; writes to rows. These can happen from multiple &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/t-sql/language-elements/transactions-transact-sql?view=sql-server-ver15&quot;&gt;transactions&lt;/a&gt;, so some concurrency control is built-in.&lt;/p&gt;

&lt;p&gt;These built-in controls are called “locks”.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Read lock&lt;/li&gt;
  &lt;li&gt;Write lock&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s also an Update lock, which involves a concept called “lock conversions”. For simplicity, it wont be covered here&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;read-lock&quot;&gt;Read lock&lt;/h1&gt;
&lt;p&gt;This just means a read operation. So if a transaction wants to read a row, it will place a read lock onto the row.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The technical term for a &lt;em&gt;read lock&lt;/em&gt; is &lt;strong&gt;shared lock&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;write-lock&quot;&gt;Write lock&lt;/h1&gt;
&lt;p&gt;This just means a write operation. So if a transaction wants to write to a row, it will place a write lock onto the row.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The technical term for a &lt;em&gt;write lock&lt;/em&gt; is &lt;strong&gt;exclusive lock&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h2&gt;
&lt;p&gt;For starters, multiple read locks can be applied to the same row (its just reads after all, no data is being changed).&lt;/p&gt;

&lt;p&gt;We don’t care about that simple scenario. We wanna jump to the juicy stuff…&lt;/p&gt;

&lt;p&gt;I’m talking about 2+ writes (exclusive locks) occurring on the same row(s) at the same time. In this case, &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms186396(v=sql.105)?redirectedfrom=MSDN&quot;&gt;only 1 of the locks will be applied&lt;/a&gt; which will “win the battle”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An edge case wont be discussed here for simplicity: but in short, when there’s a significant amount of row locks, SQL Server upgrades them to a table-level lock to save on space &amp;amp; improve efficiency. For now, we assume a scenario starting with 0 row-level locks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-at-the-same-time&quot;&gt;2 at the same time!&lt;/h3&gt;
&lt;p&gt;2 &lt;strong&gt;exclusive locks&lt;/strong&gt; can’t exist on the same row at the same time. When this happens, one of write operations is cafncelled.&lt;/p&gt;

&lt;p&gt;The technical term for a &lt;em&gt;cancelled operation&lt;/em&gt; is &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms177433(v=sql.105)&quot;&gt;deadlock&lt;/a&gt;, &amp;amp; the cancelled operation is a &lt;strong&gt;deadlock victim&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-hare--a-tortiose&quot;&gt;A hare &amp;amp; a tortiose?&lt;/h3&gt;
&lt;p&gt;Most of the time though, both write operations don’t occur at exactly the same moment.&lt;/p&gt;

&lt;p&gt;Perhaps one happens, then 100 milliseconds later, another write is attempted to the same row by another transaction.&lt;/p&gt;

&lt;p&gt;In this case, a deadlock does NOT occur. Instead, the later transaction (that was late to the party) just waits patiently until the 1st transaction releases its’ exclusive lock.&lt;/p&gt;

&lt;p&gt;However if the 1st transaction simply takes too long &amp;amp; the 2nd transaction waits too long, a timeout occurs.&lt;/p&gt;

&lt;h1 id=&quot;what-does-this-mean-for-applications&quot;&gt;What does this mean for applications?&lt;/h1&gt;
&lt;p&gt;This means application code must handle:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/2256954&quot;&gt;Deadlock victims&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/62688&quot;&gt;Query timeouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To support basic concurrency in a fault-tolerant manner.&lt;/p&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">SQL Server reads &amp;amp; writes to rows. These can happen from multiple transactions, so some concurrency control is built-in.</summary></entry><entry><title type="html">Handling exceptions in non-async methods that return Task</title><link href="vitawebsitedesign.github.io/blog/2021/01/07/handling-exceptions-in-non-async-methods-that-return-task.html" rel="alternate" type="text/html" title="Handling exceptions in non-async methods that return Task" /><published>2021-01-07T00:00:00+11:00</published><updated>2021-01-07T00:00:00+11:00</updated><id>vitawebsitedesign.github.io/blog/2021/01/07/handling-exceptions-in-non-async-methods-that-return-task</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2021/01/07/handling-exceptions-in-non-async-methods-that-return-task.html">&lt;p&gt;When a task isn’t awaited, it becomes a &lt;em&gt;“fire &amp;amp; forget”&lt;/em&gt; task. This means any exceptions thrown will be raised on the Task instead.&lt;/p&gt;

&lt;p&gt;This introduces an interesting scenario where if a method directly returns a Task without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;, it wont catch any raised exceptions. Instead, the method that &lt;strong&gt;awaited&lt;/strong&gt; the Task catches them &lt;em&gt;instead&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Consider:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main()&lt;/code&gt; is called:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SomeTask()&lt;/code&gt; throws an exception&lt;/li&gt;
  &lt;li&gt;Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetSomeTask()&lt;/code&gt; doesn’t await the call, its simply fired &amp;amp; forgot&lt;/li&gt;
  &lt;li&gt;The exception gets raised on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; instead of in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetSomeTask()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This means the exception handling needs to be in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main()&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetSomeTask()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Its quite an easy aspect to &lt;em&gt;forget&lt;/em&gt; when visualising deep conditional call stacks. And currently, our little code sample is actually causing an unhandled exception on launch.&lt;/p&gt;

&lt;p&gt;To fix this, we just need to &lt;strong&gt;expect&lt;/strong&gt; exceptions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now our unhandled exception is handled.&lt;/p&gt;

&lt;p&gt;Its such an important &amp;amp; serious bug because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It can be a &lt;strong&gt;high occurrence&lt;/strong&gt; scenario in a codebase. By default, its often better to not have nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; everywhere &amp;amp; return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; directly (where possible).&lt;/li&gt;
  &lt;li&gt;Its a &lt;strong&gt;low detectability&lt;/strong&gt; issue thats only detectable at run-time. And&lt;/li&gt;
  &lt;li&gt;Since exceptions can unexpectingly go &lt;strong&gt;unhandled&lt;/strong&gt;, it can cause serious issues depending on the context of the issue causing the exception.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">When a task isn’t awaited, it becomes a “fire &amp;amp; forget” task. This means any exceptions thrown will be raised on the Task instead.</summary></entry><entry><title type="html">Management always talks the talk, but walking the walk is easier said than done</title><link href="vitawebsitedesign.github.io/blog/2020/11/28/management-always-talks-the-talk,-but-walking-the-walk-is-easier-said-than-done.html" rel="alternate" type="text/html" title="Management always talks the talk, but walking the walk is easier said than done" /><published>2020-11-28T00:00:00+11:00</published><updated>2020-11-28T00:00:00+11:00</updated><id>vitawebsitedesign.github.io/blog/2020/11/28/management-always-talks-the-talk,-but-walking-the-walk-is-easier-said-than-done</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2020/11/28/management-always-talks-the-talk,-but-walking-the-walk-is-easier-said-than-done.html">&lt;p&gt;Even though all companies expect a certain rate of turnover, losing key personnel can disrupt key project outcomes, by the unexpected increase of &lt;strong&gt;project expenditure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A company needs to step in to address this &lt;em&gt;immediately&lt;/em&gt;, before it gets out of control. In fact, they need to do this before employees leave. This is about risk management.&lt;/p&gt;

&lt;p&gt;And this management can come through 5 primary actions.&lt;/p&gt;

&lt;h1 id=&quot;1-everybody-loves-benjamin-franklin&quot;&gt;1. Everybody loves Benjamin Franklin&lt;/h1&gt;
&lt;p&gt;When a high-salary employee leaves, often they will be replaced by hiring a lower-salary employee. This frees up &lt;a href=&quot;https://www.investopedia.com/terms/w/workingcapital.asp&quot;&gt;working capital&lt;/a&gt;, which SHOULD be re-invested into retaining existing key personnel &amp;amp; keeping the company’s turnover rate stable.&lt;/p&gt;

&lt;p&gt;What’s that? An important engineer left when capital isn’t properly reinvested into the people that actually do work in a company? &lt;em&gt;Oh no, who would’ve thought.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I get that having money sitting in an account is nice to look at, but you gotta actuall use investor capital.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“… you can go to it every day, and you could koo-joo it, and you can caress it, and you can fondle it, and a hundred years now you’ll have one ounce a gold and it won’t have done &lt;strong&gt;anything&lt;/strong&gt; for you in between.” - &lt;a href=&quot;https://financinglife.org/learn-how-to-invest/speculative-investment/&quot;&gt;Warren Buffet on gold as an asset&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the love of god - hard-working employees &lt;strong&gt;deserve&lt;/strong&gt; at least some improvement in their work life.&lt;/p&gt;

&lt;h1 id=&quot;2-gotta-get-them-sweet-meaningless-title-promotions&quot;&gt;2. Gotta get them sweet meaningless title promotions!&lt;/h1&gt;
&lt;p&gt;When an employee with high responsibility leaves, that responsibility should be assigned to an existing employee in the form of a title promotion.&lt;/p&gt;

&lt;p&gt;Sometimes a new employee is hired to take on the (now) unassigned responsibilities. Which is fine is the new employee’s skill level is high enoguh to enable meeting those reponsibilities.&lt;/p&gt;

&lt;p&gt;Unfortunately the &lt;em&gt;side effect&lt;/em&gt; is that existing employees will feel undervalued. They feel that since they have more time exposure in current &amp;amp; future works, they are more able to take on responsibilities &amp;amp; hence should get a promotion.&lt;/p&gt;

&lt;p&gt;This side effect increases the risk of said key personnel leaving due to morale.&lt;/p&gt;

&lt;h1 id=&quot;3-engineer-benchwarmers&quot;&gt;3. Engineer benchwarmers&lt;/h1&gt;
&lt;p&gt;Before intensive projects, relevant engineers (optimally) need to be in a good state of mind. This is to minimise the risk of burnout &amp;amp; maximize productivity during the project.&lt;/p&gt;

&lt;p&gt;And after, they also need a break. A time to destress, sit on the beach, a “reset” from “my life sucks” to “ah my life isnt so bad”.&lt;/p&gt;

&lt;p&gt;Good software companies &lt;strong&gt;&lt;em&gt;provide&lt;/em&gt;&lt;/strong&gt; the before, &lt;strong&gt;BUT&lt;/strong&gt; often rush into the next project after each project finishes - a never ending flurry of sweaty sprints, nose to the grindstone sessions, &amp;amp; pain.&lt;/p&gt;

&lt;p&gt;Excellent software companies do both the “before” AND “after”. For instance, Microsoft shipped the initial version of Excel, they gave their engineers a small break to unwind, instead of immediately jumping into the next project.&lt;/p&gt;

&lt;p&gt;Not applying both increases turnover risk.&lt;/p&gt;

&lt;h1 id=&quot;4-going-forward-in-the-game&quot;&gt;4. Going forward in the game&lt;/h1&gt;
&lt;p&gt;I’m not talking about just plans, because anyone can just write some docx with bullet points.&lt;/p&gt;

&lt;p&gt;I’m talkin’ about management actively ENFORCING the plan on at least a once-a-fortnight basis. Engineers need to know AND feel that they’re actually going forward at the company.&lt;/p&gt;

&lt;p&gt;Otherwise one day they’ll browse &lt;a href=&quot;https://stackoverflow.com/jobs&quot;&gt;some random website popular with software engineers&lt;/a&gt; &amp;amp; discover a shiny new company claiming that it has endless cash &amp;amp; that it cures cancer etc.&lt;/p&gt;

&lt;p&gt;Applying a career plan &lt;strong&gt;after&lt;/strong&gt; the engineer has put in their notice…. isn’t exactly going to keep them in the company.&lt;/p&gt;

&lt;h1 id=&quot;5-happy-land&quot;&gt;5. Happy land!&lt;/h1&gt;
&lt;p&gt;If a software company hasn’t bothered with a decent culture to compete for talent, then that’s probably a good first step:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Allow working from home some days, &lt;strong&gt;at the engineers choice&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Free food &amp;amp; drinks to make their work lives bearable. This has little effectiveness during BAU work, but during intensive projects that involve overtime/late nights, tasty consumables really do soften the blow.&lt;/li&gt;
  &lt;li&gt;Announcing unexpected &lt;em&gt;pleasing&lt;/em&gt; events: one-off bonuses, merch, ice-cream from a great gelato place&lt;/li&gt;
  &lt;li&gt;10% time so engineers can work on what they actually want to do, with 100% autonomy &amp;amp; NO micromanagement. We talkin’ freedom baby!&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">Even though all companies expect a certain rate of turnover, losing key personnel can disrupt key project outcomes, by the unexpected increase of project expenditure.</summary></entry><entry><title type="html">TDD aint a silver bullet - its a bronze bullet</title><link href="vitawebsitedesign.github.io/blog/2020/11/16/tdd-aint-a-silver-bullet-its-a-bronze-bullet.html" rel="alternate" type="text/html" title="TDD aint a silver bullet - its a bronze bullet" /><published>2020-11-16T00:00:00+11:00</published><updated>2020-11-16T00:00:00+11:00</updated><id>vitawebsitedesign.github.io/blog/2020/11/16/tdd-aint-a-silver%20bullet-its-a-bronze-bullet</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2020/11/16/tdd-aint-a-silver-bullet-its-a-bronze-bullet.html">&lt;p&gt;You ever hear someone relay a quote from a famous person, apply it to a situation while disregarding context, &amp;amp; then discover they got burned? Example:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“It’s far better to buy a wonderful company at a fair price, than a fair company at a wonderful price”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a Warren Buffet quote regarding “overinflated” share prices that dont justify their price-to-earning ratio.&lt;/p&gt;

&lt;p&gt;In the modern era of trading (&amp;amp; especially market situations involving public participants), most of the money is actually made on speculative momentum-based short-term &lt;a href=&quot;https://www.investopedia.com/terms/t/trendtrading.asp&quot;&gt;trend&lt;/a&gt; plays involving incomplete information, rather than &lt;strong&gt;“wonderful”&lt;/strong&gt; companies such as McDonalds:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/O6Cfk1T.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/O6Cfk1T.png&quot; alt=&quot;Love their nuggets though&quot; title=&quot;Love their nuggets though&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/Rg9dRJB.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/Rg9dRJB.png&quot; alt=&quot;One of the big winners for 2020. Good momentum-based short-term incomplete information play here&quot; title=&quot;One of the big winners for 2020. Good momentum-based short-term incomplete information play here&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The point: humans naturally want complex things to be simple, so that their cognitive load decreases. But certain things are complicated. And oversimplifying something can often hold negative effects.&lt;/p&gt;

&lt;p&gt;And this applies to &lt;a href=&quot;http://agiledata.org/essays/tdd.html&quot;&gt;TDD&lt;/a&gt;. TDD is fantastic, but there’s certain situations where it just doesn’t cut the cheese.&lt;/p&gt;

&lt;h1 id=&quot;unintentionally-taking-on-unnecessary-schedule-risk&quot;&gt;Unintentionally taking on unnecessary schedule risk&lt;/h1&gt;
&lt;p&gt;Most software companies (especially those with limited resources such as Start-ups), have certain exposure to something called &lt;a href=&quot;http://acqnotes.com/acqnote/tasks/schedule-risk&quot;&gt;schedule risk&lt;/a&gt;. This is basically when time-to-market becomes a priority for the business.&lt;/p&gt;

&lt;p&gt;In this case, anything that threatens time-to-market needs to be pushed down the priority list. And this includes &lt;strong&gt;test coverage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It doesn’t matter if its TDD, &lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;BDD&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development&quot;&gt;ATDD&lt;/a&gt; or “tests after code”. During right situations, priorities need to be aligned &lt;em&gt;correctly&lt;/em&gt; to maximise project success. And in this case, doing TDD “just because that’s what good software engineers do” is harmful. Moreso because TDD has a higher upfront cost than tests-after-code.&lt;/p&gt;

&lt;h1 id=&quot;high-requirements-volatility&quot;&gt;High requirements volatility&lt;/h1&gt;
&lt;p&gt;Depending on the company domain, certain products just have volatile requirements. It can’t be avoided - its just the nature of the biz.&lt;/p&gt;

&lt;p&gt;This is especially true for businesses building good &lt;a href=&quot;https://www.atlassian.com/company/events/summit-us/watch-sessions/2012/archives/scrum-kanban/building-an-effective-customer-feedback-loop&quot;&gt;customer feedback loops&lt;/a&gt;. These are quick-turnaround, highly competitive markets, &amp;amp; involve multiple products continually try to out-beat each other &amp;amp; come on top of the pack. The cycle never ends.&lt;/p&gt;

&lt;p&gt;In this case, TDD is &lt;em&gt;still&lt;/em&gt; beneficial. But if the project doesn’t already have decent test coverage, going from 0% to 50% can introduce &lt;strong&gt;significant&lt;/strong&gt; risk for the product. Theres no point to TDD if the product needs to be disbanded because of business failure.&lt;/p&gt;

&lt;h1 id=&quot;i-thought-i-was-a-genius---my-bad&quot;&gt;“I thought i was a genius - my bad”&lt;/h1&gt;
&lt;p&gt;The software world is full of “&lt;a href=&quot;https://www.pmi.org/learning/library/characterizing-unknown-unknowns-6077&quot;&gt;unknown unknowns&lt;/a&gt;”. Sometimes you just don’t have that squeaky-clean picture of the exact code &amp;amp; changes needed to get that meaty ticket to prod in fast, qualitiative &amp;amp; safe manner.&lt;/p&gt;

&lt;p&gt;An engineer applying TDD in this scenario will encounter multiple rounds of TDD. They create an initial set of tests, then halfway through the ticket they discover additional information, need to change interfaces/semantics &amp;amp; need to update their tests again.&lt;/p&gt;

&lt;p&gt;Depending on the number of “TDD rounds”, this can be quite expensive. This is especially true for ambitious projects where requirements aren’t clear. Perhaps the company is testing the waters with a new product, &amp;amp; they just want to see if it garners “interest” before investing additional resources into the project.&lt;/p&gt;

&lt;h1 id=&quot;oh-god-will-the-refactoring-ever-end&quot;&gt;Oh god, will the refactoring ever end?&lt;/h1&gt;
&lt;p&gt;In the end-game of TDD, test coverage is quite high, the release cycle gets fast &amp;amp; tight. Just the way we like it.&lt;/p&gt;

&lt;p&gt;But test coverage doesn’t &lt;strong&gt;&lt;em&gt;have&lt;/em&gt;&lt;/strong&gt; to be 100%. In fact, for very large &amp;amp; complex products in a company with limited resources, it’s better to leave out that other 10%. If the other uncovered 10% is low-impact features that you know isn’t gonna break, then the overhead of maintaining continually-breaking tests might not be worth the coverage benefit.&lt;/p&gt;

&lt;p&gt;It’s good to &lt;em&gt;strive&lt;/em&gt; to be perfect, just don’t &lt;em&gt;expect&lt;/em&gt; perfect. Otherwise you’ll overcommit to a practice, lose situational context &amp;amp; start inefficiently investing time &amp;amp; money.&lt;/p&gt;

&lt;h1 id=&quot;eh-not-a-silver-bullet-but-bronze-bullets-are-still-good-for-most-business-products-anyways&quot;&gt;Eh, not a silver bullet…. BUT, bronze bullets are still good for most business products anyways.&lt;/h1&gt;
&lt;p&gt;Software is complicated &amp;amp; involves many scenarios. Use that brain &amp;amp; apply the right tool for the right job. TDD is great, just be sure that you’re &lt;strong&gt;winning&lt;/strong&gt; from it, not &lt;em&gt;losing&lt;/em&gt; to it.&lt;/p&gt;

&lt;p&gt;In the end of the day, the highest priority is business success, not the egotistic feeling of being a “good software engineer”. Theres more to being a good software engineer than smashing out code. In fact, applying solid practices that maximize business success is often more valuable that being a code monkey.&lt;/p&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">You ever hear someone relay a quote from a famous person, apply it to a situation while disregarding context, &amp;amp; then discover they got burned? Example: “It’s far better to buy a wonderful company at a fair price, than a fair company at a wonderful price” This is a Warren Buffet quote regarding “overinflated” share prices that dont justify their price-to-earning ratio. In the modern era of trading (&amp;amp; especially market situations involving public participants), most of the money is actually made on speculative momentum-based short-term trend plays involving incomplete information, rather than “wonderful” companies such as McDonalds: The point: humans naturally want complex things to be simple, so that their cognitive load decreases. But certain things are complicated. And oversimplifying something can often hold negative effects. And this applies to TDD. TDD is fantastic, but there’s certain situations where it just doesn’t cut the cheese. Unintentionally taking on unnecessary schedule risk Most software companies (especially those with limited resources such as Start-ups), have certain exposure to something called schedule risk. This is basically when time-to-market becomes a priority for the business. In this case, anything that threatens time-to-market needs to be pushed down the priority list. And this includes test coverage. It doesn’t matter if its TDD, BDD, ATDD or “tests after code”. During right situations, priorities need to be aligned correctly to maximise project success. And in this case, doing TDD “just because that’s what good software engineers do” is harmful. Moreso because TDD has a higher upfront cost than tests-after-code. High requirements volatility Depending on the company domain, certain products just have volatile requirements. It can’t be avoided - its just the nature of the biz. This is especially true for businesses building good customer feedback loops. These are quick-turnaround, highly competitive markets, &amp;amp; involve multiple products continually try to out-beat each other &amp;amp; come on top of the pack. The cycle never ends. In this case, TDD is still beneficial. But if the project doesn’t already have decent test coverage, going from 0% to 50% can introduce significant risk for the product. Theres no point to TDD if the product needs to be disbanded because of business failure. “I thought i was a genius - my bad” The software world is full of “unknown unknowns”. Sometimes you just don’t have that squeaky-clean picture of the exact code &amp;amp; changes needed to get that meaty ticket to prod in fast, qualitiative &amp;amp; safe manner. An engineer applying TDD in this scenario will encounter multiple rounds of TDD. They create an initial set of tests, then halfway through the ticket they discover additional information, need to change interfaces/semantics &amp;amp; need to update their tests again. Depending on the number of “TDD rounds”, this can be quite expensive. This is especially true for ambitious projects where requirements aren’t clear. Perhaps the company is testing the waters with a new product, &amp;amp; they just want to see if it garners “interest” before investing additional resources into the project. Oh god, will the refactoring ever end? In the end-game of TDD, test coverage is quite high, the release cycle gets fast &amp;amp; tight. Just the way we like it. But test coverage doesn’t have to be 100%. In fact, for very large &amp;amp; complex products in a company with limited resources, it’s better to leave out that other 10%. If the other uncovered 10% is low-impact features that you know isn’t gonna break, then the overhead of maintaining continually-breaking tests might not be worth the coverage benefit. It’s good to strive to be perfect, just don’t expect perfect. Otherwise you’ll overcommit to a practice, lose situational context &amp;amp; start inefficiently investing time &amp;amp; money. Eh, not a silver bullet…. BUT, bronze bullets are still good for most business products anyways. Software is complicated &amp;amp; involves many scenarios. Use that brain &amp;amp; apply the right tool for the right job. TDD is great, just be sure that you’re winning from it, not losing to it. In the end of the day, the highest priority is business success, not the egotistic feeling of being a “good software engineer”. Theres more to being a good software engineer than smashing out code. In fact, applying solid practices that maximize business success is often more valuable that being a code monkey.</summary></entry><entry><title type="html">Climbing invisible tech debt mountains</title><link href="vitawebsitedesign.github.io/blog/2020/10/27/climbing-invisible-tech-debt-mountains.html" rel="alternate" type="text/html" title="Climbing invisible tech debt mountains" /><published>2020-10-27T00:00:00+11:00</published><updated>2020-10-27T00:00:00+11:00</updated><id>vitawebsitedesign.github.io/blog/2020/10/27/climbing-invisible-tech-debt-mountains</id><content type="html" xml:base="vitawebsitedesign.github.io/blog/2020/10/27/climbing-invisible-tech-debt-mountains.html">&lt;p&gt;We need 10% time, but startups don’t work that way. In fact, startups are bloody hard.&lt;/p&gt;

&lt;p&gt;10% time is a strategic initiative where software teams get dedicated “playtime” to reduce &lt;a href=&quot;https://en.wikipedia.org/wiki/Technical_debt&quot;&gt;technical debt&lt;/a&gt; (i.e.: stuff that is a pain in the ass).&lt;/p&gt;

&lt;p&gt;Think of unnecessary duplicated code that makes it really expensive &amp;amp; hard to maintain. Think of legacy tooling that just doesn’t have the productivity features of &lt;a href=&quot;https://www.jetbrains.com&quot;&gt;modern tools&lt;/a&gt;. Think of performance issues that lie in spaghetti code.&lt;/p&gt;

&lt;p&gt;Think of the those times you sketched data flow of API’s on paper. You looked at it, &amp;amp; questioned the meaning of life.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/VnM6qbm.jpeg&quot;&gt;&lt;img src=&quot;https://i.imgur.com/VnM6qbm.jpeg&quot; alt=&quot;1854 - Leonardo Da Vinci&apos;s remastered renaissance artwork of The Last Supper&quot; title=&quot;1854 - Leonardo Da Vinci&apos;s remastered renaissance artwork of The Last Supper&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are all examples of technical debt, &lt;strong&gt;and that’s ok&lt;/strong&gt;. And you know what? Startups often have &lt;em&gt;very high&lt;/em&gt; levels of technical debt, a tradeoff between software team morale &amp;amp; satisfying stakeholders with flashy products that sell like hotcakes.&lt;/p&gt;

&lt;p&gt;But even though they have the most technical debt, they are the least likely to introduce measures to manage it. And eventually the startup (more specifically, the software engineers) hit a brick wall - a big (no… HUGE) mountain of tech debt, and they stare at the mountain, and feel the fear. It makes them consider rewriting code from scratch, which is usually what happens anyway since its cheaper than fixing legacy code.&lt;/p&gt;

&lt;p&gt;And then management comes around. They simply won’t allow “playtime” to fix issues. It’s just acknowledged &amp;amp; pushed to the side. “We need feature X Y Z by yesterday”. And this is ok - but what can software engineers do in this situation?&lt;/p&gt;

&lt;p&gt;How do we manage technical debt when 0 time is dedicated to it?&lt;/p&gt;

&lt;h1 id=&quot;sigh-will-this-cost-me-my-arm-or-leg-today&quot;&gt;“Sigh, will this cost me my arm or leg today?”&lt;/h1&gt;
&lt;h2 id=&quot;solution-1-just-refactor-more-right&quot;&gt;Solution 1: just refactor more!…. right?&lt;/h2&gt;
&lt;p&gt;An often approach is to trade off &lt;a href=&quot;https://www.scruminc.com/velocity/&quot;&gt;sprint velocity&lt;/a&gt; for non-visible technical debt reduction. This is usually either approved by the managers (e.g.: the product owner may approve because it’s a smaller overhead than rewriting entire codebases), or not approved by managers. If it’s &lt;strong&gt;NOT&lt;/strong&gt; approved, good software engineers often take the initiative themselves, knowing that even though it’s not visible by management, technical debt kills.&lt;/p&gt;

&lt;p&gt;This is equivalent to a chef cleaning their table to prepare for the next dish.&lt;/p&gt;

&lt;h2 id=&quot;solution-2-moonlighting&quot;&gt;Solution 2: moonlighting&lt;/h2&gt;
&lt;p&gt;When not approved, software engineers can slip in some tech debt refactoring. This can happen during work hours (e.g.: 30 mins during a 9-5 window some days) or outside work hours (e.g.: day ends at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5pm&lt;/code&gt;, they stay back &amp;amp; refactor to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5:30 - 6:00pm&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This introduces a problem of burnout, but often if its:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;non-mandatory&lt;/li&gt;
  &lt;li&gt;the initiative is &lt;strong&gt;self-motivated&lt;/strong&gt; (e.g.: something is really itching them &amp;amp; fixing the tech debt brings them more happiness than spending the 30 mins at home watching Netflix)&lt;/li&gt;
  &lt;li&gt;they are working on &lt;em&gt;“their baby”&lt;/em&gt; (i.e.: the project is something that they deeply care about, they gave birth to the repo, &amp;amp; they are the kings/queens of that domain)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then it’s often a good approach. The software engineer is happy, their colleagues are happy, &amp;amp; managers are usually happy to let someone overwork a bit. &lt;strong&gt;EVERYONES HAPPY!&lt;/strong&gt; Additionally, good managers will know of &lt;a href=&quot;https://en.everybodywiki.com/Dead_Sea_Effect&quot;&gt;the Dead Sea effect&lt;/a&gt; &amp;amp; the importance of turnover. They will approve overworking, but also drop a hint to them after slapping their back: “…but make sure to not burn out”.&lt;/p&gt;

&lt;h2 id=&quot;solution-3-out-with-the-old-in-with-the-new&quot;&gt;Solution 3: out with the old, in with the new!&lt;/h2&gt;
&lt;p&gt;Sometimes the tech debt is just so bad that its actually cheaper to just rewrite the entire repo(s) from scratch.&lt;/p&gt;

&lt;p&gt;Considered a high-risk low-reward move, its difficult to justify this option to management. Often bad engineers just do it without approval, expecting a big congratulations upon presenting their work to their colleagues. BACK SLAPS ALL AROUND.&lt;/p&gt;

&lt;p&gt;Unfortunately getting rewrites to replace the existing test &amp;amp; prod instances is complicated, &amp;amp; usually rewrites don’t have good test coverage (&lt;em&gt;naughty word&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/vcia2Ny.jpg&quot;&gt;&lt;img src=&quot;https://i.imgur.com/vcia2Ny.jpg&quot; alt=&quot;Software decisions is all about prioritising tradeoffs. Free lunches are welcome, but rare&quot; title=&quot;Software decisions is all about prioritising tradeoffs. Free lunches are welcome, but rare&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve seen this work before, but the incredible expense is always an important factor to consider before creating those Jira epics.&lt;/p&gt;

&lt;p&gt;Expense, with a capital “E”.&lt;/p&gt;

&lt;h2 id=&quot;solution-4-the-dead-sea-effect&quot;&gt;Solution 4: the dead sea effect&lt;/h2&gt;
&lt;p&gt;When all 3 above approaches fail, software engineers get low morale. Its like world war, &amp;amp; the engineers are in the trenches. They got no clean clothes, there’s bullets flying over their head on a daily basis, there’s not much food available (&amp;amp; what is available is infested with vermin). Oh god no not again!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/R84oL6o.jpeg&quot;&gt;&lt;img src=&quot;https://i.imgur.com/R84oL6o.jpeg&quot; alt=&quot;We&apos;ve all been like this at some stage in our lives. But a company that intentionally does this will have impressive amounts of turnover&quot; title=&quot;We&apos;ve all been like this at some stage in our lives. But a company that intentionally does this will have impressive amounts of turnover&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s just a terrible situation to be in. And it often results in turnover.&lt;/p&gt;

&lt;p&gt;And of course, seeing comrades leave makes you question whether you should stay or step up to the next level in your life.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/xgHt9QN.jpeg&quot;&gt;&lt;img src=&quot;https://i.imgur.com/xgHt9QN.jpeg&quot; alt=&quot;The Dead Sea effect doubles as a domino effect. 1 engineers leaves, then 2, then 4&quot; title=&quot;The Dead Sea effect doubles as a domino effect. 1 engineers leaves, then 2, then 4&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the end-game that all startups risk when they simply ignore technical debt, pretend that it doesn’t exist, &amp;amp; just whip software engineers even when they’re down. Often to stop the incredible turnover, they have to increase monetary compensation. And even then, thats not guaranteed to solve the problem.&lt;/p&gt;

&lt;p&gt;Often, happiness is more preferred than money. In other words, a good workplace (daily happiness) is more important than compensation, aslong as the compensation is “decent” enough for the individuals standard of living &amp;amp; financial/tangible goals.&lt;/p&gt;

&lt;h1 id=&quot;what-is-the-secret-sauce&quot;&gt;What is the secret sauce?&lt;/h1&gt;
&lt;p&gt;If you’re at ground zero, solutions 1 &amp;amp; 2 are the good choices.&lt;/p&gt;

&lt;p&gt;You can refactor more by changing your approach to each ticket. For example, before opening each PR you review it yourself &amp;amp; do a final “pass” to cleanup any remaining code. You can refactor code that’s not related to your ticket, whilst still staying out of &lt;a href=&quot;https://www.dictionary.com/e/slang/rabbit-hole/&quot;&gt;the rabbit hole traps&lt;/a&gt; that often come out of the tall grass &amp;amp; snatch you.&lt;/p&gt;

&lt;p&gt;You can also moonlight. Even though a lot of software companies have a dedicated work window (e.g.: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9am to 5pm&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8am to 6pm&lt;/code&gt;), software engineers often perform additional work. Weekend production issues, late night team releases, early morning “all hands on deck” situations for critical releases the previous night. And since moonlighting is a self-initiative on your own “baby” (repos), its easy to be motivated to make it nice &amp;amp; pretty.&lt;/p&gt;

&lt;p&gt;Startups have the &lt;strong&gt;0 time, we want everything&lt;/strong&gt; problem. Theres just not enough time to do &lt;em&gt;everything&lt;/em&gt; (even if you increase headcount). In the end, there are some good approaches to tackling tech debt, &amp;amp; whilst the 3 solutions above don’t suit all situations, there should be at least 1 that is correct, efficient, effective &amp;amp; a perfect match for your depression.&lt;/p&gt;

&lt;p&gt;I wish you the best of luck, you’ll need it.&lt;/p&gt;</content><author><name>Michael Nguyen</name></author><summary type="html">We need 10% time, but startups don’t work that way. In fact, startups are bloody hard.</summary></entry></feed>